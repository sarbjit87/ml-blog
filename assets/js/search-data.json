{
  
    
        "post0": {
            "title": "Medical Insurance prediction using linear regression",
            "content": "https://www.kaggle.com/shubha23/insurance-forecast-a-regression-problem . https://www.kaggle.com/sivakumarai/insurance-premium-prediction-linear-regression . https://www.kaggle.com/prasy46/insurance-premium-prediction-by-linear-regression . https://www.kaggle.com/pvaibhav1995/insurance-forecast-by-using-linear-regression . import torch import torchvision import torch.nn as nn import pandas as pd import seaborn as sns import matplotlib.pyplot as plt import torch.nn.functional as F from torchvision.datasets.utils import download_url from torch.utils.data import DataLoader, TensorDataset, random_split . Data Exploration . Let&#39;s load the data from the csv file using Panda&#39;s read_csv function. This will load the data as dataframe. . df = pd.read_csv(&quot;./input/insurance.csv&quot;) . # First five rows df.head() . age sex bmi children smoker region expenses . 0 19 | female | 27.9 | 0 | yes | southwest | 16884.92 | . 1 18 | male | 33.8 | 1 | no | southeast | 1725.55 | . 2 28 | male | 33.0 | 3 | no | southeast | 4449.46 | . 3 33 | male | 22.7 | 0 | no | northwest | 21984.47 | . 4 32 | male | 28.9 | 0 | no | northwest | 3866.86 | . # Last five rows df.tail() . age sex bmi children smoker region expenses . 1333 50 | male | 31.0 | 3 | no | northwest | 10600.55 | . 1334 18 | female | 31.9 | 0 | no | northeast | 2205.98 | . 1335 18 | female | 36.9 | 0 | no | southeast | 1629.83 | . 1336 21 | female | 25.8 | 0 | no | southwest | 2007.95 | . 1337 61 | female | 29.1 | 0 | yes | northwest | 29141.36 | . # Statistical information for our dataset df.describe() . age bmi children expenses . count 1338.000000 | 1338.000000 | 1338.000000 | 1338.000000 | . mean 39.207025 | 30.665471 | 1.094918 | 13270.422414 | . std 14.049960 | 6.098382 | 1.205493 | 12110.011240 | . min 18.000000 | 16.000000 | 0.000000 | 1121.870000 | . 25% 27.000000 | 26.300000 | 0.000000 | 4740.287500 | . 50% 39.000000 | 30.400000 | 1.000000 | 9382.030000 | . 75% 51.000000 | 34.700000 | 2.000000 | 16639.915000 | . max 64.000000 | 53.100000 | 5.000000 | 63770.430000 | . What can we infer from descriptive stats? . Average age of customers is about 39 years with maximum age of 64 years and they have one child on an average with minimum of no child and maximum of 5 children. 75% of observations show 51 years of age and 2 children. The charges for insurance on an average is 13270.42 units with 75% obseravtions close to 16639.91 units. . # Data types for all columns df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 1338 entries, 0 to 1337 Data columns (total 7 columns): # Column Non-Null Count Dtype -- -- 0 age 1338 non-null int64 1 sex 1338 non-null object 2 bmi 1338 non-null float64 3 children 1338 non-null int64 4 smoker 1338 non-null object 5 region 1338 non-null object 6 expenses 1338 non-null float64 dtypes: float64(2), int64(2), object(3) memory usage: 73.3+ KB . # See if there are any missing values print(df.isnull().sum()) . age 0 sex 0 bmi 0 children 0 smoker 0 region 0 expenses 0 dtype: int64 . Data Visualization . Let&#39;s visualize the target variable - &#39;expenses&#39; first and see its distribution using histogram. . plt.figure(figsize=(6,6)) plt.hist(df.expenses, bins = &#39;auto&#39;, color = &#39;purple&#39;) plt.xlabel(&quot;expenses&quot;) plt.title(&quot;Distribution of expenses&quot;) . Text(0.5, 1.0, &#39;Distribution of expenses&#39;) . What can we infer from data distribution? . Most of the expenses are between 100 and 10000 | Very few people are charged above 50000 | Mean is 13270 (from descriptive stats) and the data is towards the left of distribution | . Let&#39;s now plot the outliers - expenses vs other variables . cols = [&#39;age&#39;, &#39;children&#39;, &#39;sex&#39;, &#39;smoker&#39;, &#39;region&#39;] for col in cols: plt.figure(figsize=(8,8)) sns.boxplot(x = df[col], y = df[&#39;expenses&#39;]) . What can we infer from box-plots? . As age increases, the insurance cost increases i.e. younger people have less cost | Customers with 2 children are charged more | Being male or female has no impact but males have high cost range | Smokers are charged higher | Region does not show much correlation with charges, though, South-east region have larger range up to about 20,000 in its dsitribution of customer charges. | . In our dataset, we have three qualitative variables i.e. sex, smoker and region. We can convert these to quantitative variables for a better model. Categorical varaibles can simply be assigned a binary value since they have only two values. Region can be converted using Panda&#39;s get_dummies method. . df.region = pd.get_dummies(df.region) df.region . 0 0 1 0 2 0 3 0 4 0 .. 1333 0 1334 1 1335 0 1336 0 1337 0 Name: region, Length: 1338, dtype: uint8 . df.smoker . 0 yes 1 no 2 no 3 no 4 no ... 1333 no 1334 no 1335 no 1336 no 1337 yes Name: smoker, Length: 1338, dtype: object . df.smoker df.smoker = [1 if x == &#39;yes&#39; else 0 for x in df.smoker] df.sex = [1 if x == &#39;male&#39; else 0 for x in df.sex] df.smoker . 0 1 1 0 2 0 3 0 4 0 .. 1333 0 1334 0 1335 0 1336 0 1337 1 Name: smoker, Length: 1338, dtype: int64 . df.expenses = pd.to_numeric(df.expenses) . # Create Correlation matrix for all features of data. df.corr() . age sex bmi children smoker region expenses . age 1.000000 | -0.020856 | 0.109341 | 0.042469 | -0.025019 | 0.002475 | 0.299008 | . sex -0.020856 | 1.000000 | 0.046380 | 0.017163 | 0.076185 | -0.002425 | 0.057292 | . bmi 0.109341 | 0.046380 | 1.000000 | 0.012645 | 0.003968 | -0.138091 | 0.198576 | . children 0.042469 | 0.017163 | 0.012645 | 1.000000 | 0.007673 | -0.022808 | 0.067998 | . smoker -0.025019 | 0.076185 | 0.003968 | 0.007673 | 1.000000 | 0.002811 | 0.787251 | . region 0.002475 | -0.002425 | -0.138091 | -0.022808 | 0.002811 | 1.000000 | 0.006349 | . expenses 0.299008 | 0.057292 | 0.198576 | 0.067998 | 0.787251 | 0.006349 | 1.000000 | . # Generate heatmap to visualize strong &amp; weak correlations. sns.heatmap(df.corr().round(2), square=True, cmap=&#39;RdYlGn&#39;, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x7fbf30cfe950&gt; . From the heatmap, we can infer that the expenses &amp; smoker have the highest co-relation and expenses &amp; region have the lowest co-relation. . sns.pairplot(df) . &lt;seaborn.axisgrid.PairGrid at 0x7fbf34c795d0&gt; . targets_df = df.expenses inputs_df = df.drop([&#39;expenses&#39;], axis=1) inputs_df . age sex bmi children smoker region . 0 19 | 0 | 27.9 | 0 | 1 | 0 | . 1 18 | 1 | 33.8 | 1 | 0 | 0 | . 2 28 | 1 | 33.0 | 3 | 0 | 0 | . 3 33 | 1 | 22.7 | 0 | 0 | 0 | . 4 32 | 1 | 28.9 | 0 | 0 | 0 | . ... ... | ... | ... | ... | ... | ... | . 1333 50 | 1 | 31.0 | 3 | 0 | 0 | . 1334 18 | 0 | 31.9 | 0 | 0 | 1 | . 1335 18 | 0 | 36.9 | 0 | 0 | 0 | . 1336 21 | 0 | 25.8 | 0 | 0 | 0 | . 1337 61 | 0 | 29.1 | 0 | 1 | 0 | . 1338 rows × 6 columns . # Convert Dataframe to Numpy Arrays inputs_narray = inputs_df.to_numpy(&#39;float32&#39;) target_narray = targets_df.to_numpy(&#39;float32&#39;) . # Create Pytorch Tensors from Numpy Array&#39;s inputs = torch.from_numpy(inputs_narray) targets = torch.from_numpy(target_narray) . inputs.dtype . torch.float32 . Step 2: Prepare the dataset for training . inputs.dtype, targets.dtype . (torch.float32, torch.float32) . num_rows = inputs.shape[0] . Next, we need to create PyTorch datasets &amp; data loaders for training &amp; validation. We&#39;ll start by creating a TensorDataset. . dataset = TensorDataset(inputs, targets) . Q: Pick a number between 0.1 and 0.2 to determine the fraction of data that will be used for creating the validation set. Then use random_split to create training &amp; validation datasets. . val_percent = 0.10 # between 0.1 and 0.2 val_size = int(num_rows * val_percent) train_size = num_rows - val_size train_ds, val_ds = random_split(dataset, [train_size , val_size ]) . Finally, we can create data loaders for training &amp; validation. . batch_size = 64 . train_loader = DataLoader(train_ds, batch_size, shuffle=True) val_loader = DataLoader(val_ds, batch_size) . Let&#39;s look at a batch of data to verify everything is working fine so far. . for xb, yb in train_loader: print(&quot;inputs:&quot;, xb) print(&quot;targets:&quot;, yb) break . inputs: tensor([[18.0000, 0.0000, 32.1000, 2.0000, 0.0000, 0.0000], [47.0000, 1.0000, 29.8000, 3.0000, 0.0000, 0.0000], [52.0000, 1.0000, 27.4000, 0.0000, 1.0000, 0.0000], [48.0000, 1.0000, 29.6000, 0.0000, 0.0000, 0.0000], [37.0000, 1.0000, 30.8000, 0.0000, 0.0000, 0.0000], [51.0000, 0.0000, 35.0000, 2.0000, 1.0000, 1.0000], [19.0000, 0.0000, 17.8000, 0.0000, 0.0000, 0.0000], [35.0000, 1.0000, 27.1000, 1.0000, 0.0000, 0.0000], [40.0000, 1.0000, 32.8000, 1.0000, 1.0000, 1.0000], [19.0000, 0.0000, 28.9000, 0.0000, 0.0000, 0.0000], [36.0000, 1.0000, 35.2000, 1.0000, 1.0000, 0.0000], [22.0000, 0.0000, 39.8000, 0.0000, 0.0000, 1.0000], [57.0000, 0.0000, 29.8000, 0.0000, 1.0000, 0.0000], [29.0000, 0.0000, 27.9000, 1.0000, 1.0000, 0.0000], [18.0000, 0.0000, 30.1000, 0.0000, 0.0000, 1.0000], [42.0000, 1.0000, 37.2000, 2.0000, 0.0000, 0.0000], [56.0000, 0.0000, 28.3000, 0.0000, 0.0000, 1.0000], [37.0000, 1.0000, 29.8000, 2.0000, 0.0000, 1.0000], [22.0000, 1.0000, 28.3000, 1.0000, 0.0000, 0.0000], [19.0000, 1.0000, 30.6000, 0.0000, 0.0000, 0.0000], [34.0000, 0.0000, 31.9000, 1.0000, 1.0000, 1.0000], [50.0000, 0.0000, 31.6000, 2.0000, 0.0000, 0.0000], [34.0000, 1.0000, 34.2000, 0.0000, 0.0000, 0.0000], [18.0000, 0.0000, 31.9000, 0.0000, 0.0000, 1.0000], [57.0000, 1.0000, 27.9000, 1.0000, 0.0000, 0.0000], [29.0000, 0.0000, 29.6000, 1.0000, 0.0000, 0.0000], [28.0000, 0.0000, 33.0000, 2.0000, 0.0000, 0.0000], [29.0000, 0.0000, 20.2000, 2.0000, 0.0000, 0.0000], [29.0000, 1.0000, 34.4000, 0.0000, 1.0000, 0.0000], [48.0000, 1.0000, 24.4000, 0.0000, 1.0000, 0.0000], [35.0000, 0.0000, 38.1000, 2.0000, 0.0000, 1.0000], [34.0000, 1.0000, 34.7000, 0.0000, 0.0000, 1.0000], [18.0000, 0.0000, 40.3000, 0.0000, 0.0000, 0.0000], [38.0000, 1.0000, 28.3000, 1.0000, 0.0000, 0.0000], [56.0000, 0.0000, 33.8000, 2.0000, 0.0000, 0.0000], [50.0000, 0.0000, 33.7000, 4.0000, 0.0000, 0.0000], [33.0000, 0.0000, 38.9000, 3.0000, 0.0000, 0.0000], [35.0000, 0.0000, 31.0000, 1.0000, 0.0000, 0.0000], [64.0000, 0.0000, 33.0000, 0.0000, 0.0000, 0.0000], [19.0000, 0.0000, 21.7000, 0.0000, 1.0000, 0.0000], [22.0000, 0.0000, 28.1000, 0.0000, 0.0000, 0.0000], [47.0000, 0.0000, 23.6000, 1.0000, 0.0000, 0.0000], [57.0000, 1.0000, 34.0000, 0.0000, 0.0000, 0.0000], [18.0000, 0.0000, 38.3000, 0.0000, 0.0000, 0.0000], [23.0000, 1.0000, 27.4000, 1.0000, 0.0000, 0.0000], [50.0000, 0.0000, 30.1000, 1.0000, 0.0000, 0.0000], [24.0000, 1.0000, 29.3000, 0.0000, 0.0000, 0.0000], [36.0000, 1.0000, 41.9000, 3.0000, 1.0000, 1.0000], [53.0000, 0.0000, 32.3000, 2.0000, 0.0000, 1.0000], [64.0000, 0.0000, 31.8000, 2.0000, 0.0000, 1.0000], [46.0000, 0.0000, 28.9000, 2.0000, 0.0000, 0.0000], [28.0000, 1.0000, 33.8000, 0.0000, 0.0000, 0.0000], [46.0000, 1.0000, 22.3000, 0.0000, 0.0000, 0.0000], [30.0000, 0.0000, 32.4000, 1.0000, 0.0000, 0.0000], [54.0000, 0.0000, 27.6000, 1.0000, 0.0000, 0.0000], [38.0000, 1.0000, 16.8000, 2.0000, 0.0000, 1.0000], [31.0000, 1.0000, 20.4000, 0.0000, 0.0000, 0.0000], [38.0000, 1.0000, 29.3000, 2.0000, 0.0000, 0.0000], [38.0000, 1.0000, 38.4000, 3.0000, 1.0000, 0.0000], [55.0000, 1.0000, 37.3000, 0.0000, 0.0000, 0.0000], [29.0000, 1.0000, 22.5000, 3.0000, 0.0000, 1.0000], [52.0000, 0.0000, 25.3000, 2.0000, 1.0000, 0.0000], [61.0000, 0.0000, 28.2000, 0.0000, 0.0000, 0.0000], [36.0000, 0.0000, 22.6000, 2.0000, 1.0000, 0.0000]]) targets: tensor([ 2801.2600, 9620.3301, 24393.6191, 21232.1797, 4646.7598, 44641.1992, 1727.7900, 4746.3398, 39125.3281, 1743.2100, 38709.1797, 2755.0200, 27533.9102, 19107.7793, 2203.4700, 7162.0098, 11657.7197, 6406.4102, 2639.0400, 1639.5601, 37701.8789, 10118.4199, 3935.1799, 2205.9800, 11554.2197, 3947.4099, 4349.4600, 4906.4102, 36197.6992, 21223.6797, 24915.0508, 4518.8301, 1634.5699, 5484.4702, 12643.3799, 11299.3398, 5972.3799, 5240.7700, 14692.6699, 13844.5098, 2155.6799, 8539.6699, 11356.6602, 1631.8199, 2789.0601, 9910.3604, 1977.8199, 43753.3398, 29186.4805, 16069.0801, 8823.2803, 19673.3398, 7147.1099, 4149.7402, 11305.9297, 6640.5400, 3260.2000, 6457.8398, 41949.2383, 20630.2793, 5209.5801, 24667.4199, 13041.9199, 18608.2598]) . Step 3: Create a Linear Regression Model . Hint: Think carefully about picking a good loss fuction (it&#39;s not cross entropy). Maybe try 2-3 of them and see which one works best. See https://pytorch.org/docs/stable/nn.functional.html#loss-functions . input_size = len(inputs_df.columns) output_size = 1 . class InsuranceModel(nn.Module): def __init__(self): super().__init__() self.linear = nn.Linear(input_size, output_size) def forward(self, xb): out = self.linear(xb) return out def training_step(self, batch): inputs, targets = batch # Generate predictions out = self(inputs) # Calcuate loss loss = F.smooth_l1_loss(out,targets) return loss def validation_step(self, batch): inputs, targets = batch # Generate predictions out = self(inputs) # Calculate loss loss = F.smooth_l1_loss(out,targets) return {&#39;val_loss&#39;: loss.detach()} def validation_epoch_end(self, outputs): batch_losses = [x[&#39;val_loss&#39;] for x in outputs] epoch_loss = torch.stack(batch_losses).mean() # Combine losses return {&#39;val_loss&#39;: epoch_loss.item()} def epoch_end(self, epoch, result, num_epochs): # Print result every 20th epoch if (epoch+1) % 20 == 0 or epoch == num_epochs-1: print(&quot;Epoch [{}], val_loss: {:.4f}&quot;.format(epoch+1, result[&#39;val_loss&#39;])) . Let us create a model using the InsuranceModel class. You may need to come back later and re-run the next cell to reinitialize the model, in case the loss becomes nan or infinity. . model = InsuranceModel() . Let&#39;s check out the weights and biases of the model using model.parameters. . list(model.parameters()) . [Parameter containing: tensor([[ 0.1707, 0.2400, -0.0108, -0.0098, 0.3481, 0.1212]], requires_grad=True), Parameter containing: tensor([0.3026], requires_grad=True)] . Step 4: Train the model to fit the data . To train our model, we&#39;ll use the same fit function explained in the lecture. That&#39;s the benefit of defining a generic training loop - you can use it for any problem. . def evaluate(model, val_loader): outputs = [model.validation_step(batch) for batch in val_loader] return model.validation_epoch_end(outputs) def fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD): history = [] optimizer = opt_func(model.parameters(), lr) for epoch in range(epochs): # Training Phase for batch in train_loader: loss = model.training_step(batch) loss.backward() optimizer.step() optimizer.zero_grad() # Validation phase result = evaluate(model, val_loader) model.epoch_end(epoch, result, epochs) history.append(result) return history . Use the evaluate function to calculate the loss on the validation set before training.** . result = evaluate(model, val_ds) print(result) . {&#39;val_loss&#39;: 11789.875} . /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:23: UserWarning: Using a target size (torch.Size([])) that is different to the input size (torch.Size([1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. . We are now ready to train the model. You may need to run the training loop many times, for different number of epochs and with different learning rates, to get a good result. Also, if your loss becomes too large (or nan), you may have to re-initialize the model by running the cell model = InsuranceModel(). Experiment with this for a while, and try to get to as low a loss as possible. . Q: Train the model 4-5 times with different learning rates &amp; for different number of epochs. . Hint: Vary learning rates by orders of 10 (e.g. 1e-2, 1e-3, 1e-4, 1e-5, 1e-6) to figure out what works. . epochs = 100 lr = 1e-6 history1 = fit(epochs, lr, model, train_loader, val_loader) . /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: UserWarning: Using a target size (torch.Size([64])) that is different to the input size (torch.Size([64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. from ipykernel import kernelapp as app /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: UserWarning: Using a target size (torch.Size([53])) that is different to the input size (torch.Size([53, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. from ipykernel import kernelapp as app /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:23: UserWarning: Using a target size (torch.Size([64])) that is different to the input size (torch.Size([64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:23: UserWarning: Using a target size (torch.Size([5])) that is different to the input size (torch.Size([5, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. . Epoch [20], val_loss: 14715.1221 Epoch [40], val_loss: 14714.1562 Epoch [60], val_loss: 14713.1768 Epoch [80], val_loss: 14712.1982 Epoch [100], val_loss: 14711.2266 . epochs = 100 lr = 1e-5 history2 = fit(epochs, lr, model, train_loader, val_loader) . /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: UserWarning: Using a target size (torch.Size([64])) that is different to the input size (torch.Size([64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. from ipykernel import kernelapp as app /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: UserWarning: Using a target size (torch.Size([53])) that is different to the input size (torch.Size([53, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. from ipykernel import kernelapp as app /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:23: UserWarning: Using a target size (torch.Size([64])) that is different to the input size (torch.Size([64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:23: UserWarning: Using a target size (torch.Size([5])) that is different to the input size (torch.Size([5, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. . Epoch [20], val_loss: 14701.5000 Epoch [40], val_loss: 14691.7607 Epoch [60], val_loss: 14682.0469 Epoch [80], val_loss: 14672.3018 Epoch [100], val_loss: 14662.5732 . epochs = 100 lr = 1e-4 history3 = fit(epochs, lr, model, train_loader, val_loader) . /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: UserWarning: Using a target size (torch.Size([64])) that is different to the input size (torch.Size([64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. from ipykernel import kernelapp as app /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: UserWarning: Using a target size (torch.Size([53])) that is different to the input size (torch.Size([53, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. from ipykernel import kernelapp as app /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:23: UserWarning: Using a target size (torch.Size([64])) that is different to the input size (torch.Size([64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:23: UserWarning: Using a target size (torch.Size([5])) that is different to the input size (torch.Size([5, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. . Epoch [20], val_loss: 14565.2578 Epoch [40], val_loss: 14467.9404 Epoch [60], val_loss: 14370.6123 Epoch [80], val_loss: 14273.2822 Epoch [100], val_loss: 14175.9639 . epochs = 100 lr = 1e-3 history4 = fit(epochs, lr, model, train_loader, val_loader) . /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: UserWarning: Using a target size (torch.Size([64])) that is different to the input size (torch.Size([64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. from ipykernel import kernelapp as app /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: UserWarning: Using a target size (torch.Size([53])) that is different to the input size (torch.Size([53, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. from ipykernel import kernelapp as app /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:23: UserWarning: Using a target size (torch.Size([64])) that is different to the input size (torch.Size([64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:23: UserWarning: Using a target size (torch.Size([5])) that is different to the input size (torch.Size([5, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. . Epoch [20], val_loss: 13224.3955 Epoch [40], val_loss: 12438.8311 Epoch [60], val_loss: 11806.9014 Epoch [80], val_loss: 11286.7607 Epoch [100], val_loss: 10855.7646 . epochs = 100 lr = 1e-2 history5 = fit(epochs, lr, model, train_loader, val_loader) . /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: UserWarning: Using a target size (torch.Size([64])) that is different to the input size (torch.Size([64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. from ipykernel import kernelapp as app /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:15: UserWarning: Using a target size (torch.Size([53])) that is different to the input size (torch.Size([53, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. from ipykernel import kernelapp as app /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:23: UserWarning: Using a target size (torch.Size([64])) that is different to the input size (torch.Size([64, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. /Users/sarbjit/anaconda3/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:23: UserWarning: Using a target size (torch.Size([5])) that is different to the input size (torch.Size([5, 1])). This will likely lead to incorrect results due to broadcasting. Please ensure they have the same size. . Epoch [20], val_loss: 9249.7070 Epoch [40], val_loss: 8982.9990 Epoch [60], val_loss: 8934.1240 Epoch [80], val_loss: 8917.0078 Epoch [100], val_loss: 8909.7666 . val_loss = [result] + history1 + history2 + history3 + history4 + history5 val_loss_list = [vloss[&#39;val_loss&#39;] for vloss in val_loss] plt.plot(val_loss_list, &#39;-x&#39;) plt.title(&#39;Validation Loss vs. Number of epochs&#39;) plt.xlabel(&#39;Epochs&#39;) plt.ylabel(&#39;Loss&#39;) . Text(0, 0.5, &#39;Loss&#39;) . Step 5: Make predictions using the trained model . def predict_single(input, target, model): inputs = input.unsqueeze(0) predictions = model(inputs) prediction = predictions[0].detach() print(&quot;Input:&quot;, input) print(&quot;Target:&quot;, target) print(&quot;Prediction:&quot;, prediction) . input, target = val_ds[0] predict_single(input, target, model) . Input: tensor([59.0000, 1.0000, 26.4000, 0.0000, 0.0000, 0.0000]) Target: tensor(11743.2998) Prediction: tensor([10942.4648]) . input, target = val_ds[10] predict_single(input, target, model) . Input: tensor([39.0000, 0.0000, 22.8000, 3.0000, 0.0000, 1.0000]) Target: tensor(7985.8198) Prediction: tensor([7929.2964]) . input, target = val_ds[23] predict_single(input, target, model) . Input: tensor([30., 0., 20., 3., 0., 0.]) Target: tensor(5693.4302) Prediction: tensor([6416.1772]) .",
            "url": "https://mlblog.singhsarbjit.com/2020/08/29/insurance-linear.html",
            "relUrl": "/2020/08/29/insurance-linear.html",
            "date": " • Aug 29, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Logistic Regression in PyTorch",
            "content": "In this tutorial, we&#39;ll use the famous MNIST Handwritten Digits Database as our training dataset for solving the Logistic Regression Problem. It consists of 28px by 28px grayscale images of handwritten digits (0 to 9), along with labels for each image indicating which digit it represents. Here are some sample images from the dataset: . . Exploring the Data . We begin by importing torch and torchvision. torchvision contains some utilities for working with image data. It also contains helper classes to automatically download and import popular datasets like MNIST. . # Imports import torch import torchvision from torchvision.datasets import MNIST . # Download training dataset dataset = MNIST(root=&#39;input/&#39;, download=True) . When this statement is executed for the first time, it downloads the data to the input/ directory next to the notebook and creates a PyTorch Dataset. On subsequent executions, the download is skipped as the data is already downloaded. Let&#39;s check the size of the dataset. . len(dataset) . 60000 . The dataset has 60,000 images which can be used to train the model. There is also an additonal test set of 10,000 images which can be created by passing train=False to the MNIST class. . test_dataset = MNIST(root=&#39;input/&#39;, train=False) len(test_dataset) . 10000 . Let&#39;s look at a sample element from the training dataset. . dataset[0] . (&lt;PIL.Image.Image image mode=L size=28x28 at 0x7FC1BD369990&gt;, 5) . It&#39;s a pair, consisting of a 28x28 image and a label. The image is an object of the class PIL.Image.Image, which is a part of the Python imaging library Pillow. We can view the image within Jupyter using matplotlib, the de-facto plotting and graphing library for data science in Python. . import matplotlib.pyplot as plt %matplotlib inline . Along with importing matplotlib, a special statement %matplotlib inline is added to indicate to Jupyter that we want to plot the graphs within the notebook. Without this line, Jupyter will show the image in a popup. Statements starting with % are called IPython magic commands, and are used to configure the behavior of Jupyter itself. You can find a full list of magic commands here: https://ipython.readthedocs.io/en/stable/interactive/magics.html . . Let&#39;s look at a couple of images from the dataset. . image, label = dataset[0] plt.imshow(image, cmap=&#39;gray&#39;) print(&#39;Label:&#39;, label) . Label: 5 . image, label = dataset[10] plt.imshow(image, cmap=&#39;gray&#39;) print(&#39;Label:&#39;, label) . Label: 3 . It&#39;s evident that these images are quite small in size, and recognizing the digits can sometimes be hard even for the human eye. While it&#39;s useful to look at these images, there&#39;s just one problem here: PyTorch doesn&#39;t know how to work with images. We need to convert the images into tensors. We can do this by specifying a transform while creating our dataset. . import torchvision.transforms as transforms . PyTorch datasets allow us to specify one or more transformation functions which are applied to the images as they are loaded. torchvision.transforms contains many such predefined functions, and we&#39;ll use the ToTensor transform to convert images into PyTorch tensors. . # MNIST dataset (images and labels) dataset = MNIST(root=&#39;input/&#39;, train=True, transform=transforms.ToTensor()) . img_tensor, label = dataset[0] print(img_tensor.shape, label) . torch.Size([1, 28, 28]) 5 . The image is now converted to a 1x28x28 tensor. The first dimension is used to keep track of the color channels. Since images in the MNIST dataset are grayscale, there&#39;s just one channel. Other datasets have images with color, in which case there are 3 channels: red, green and blue (RGB). Let&#39;s look at some sample values inside the tensor: . print(img_tensor[:,10:15,10:15]) print(torch.max(img_tensor), torch.min(img_tensor)) . tensor([[[0.0039, 0.6039, 0.9922, 0.3529, 0.0000], [0.0000, 0.5451, 0.9922, 0.7451, 0.0078], [0.0000, 0.0431, 0.7451, 0.9922, 0.2745], [0.0000, 0.0000, 0.1373, 0.9451, 0.8824], [0.0000, 0.0000, 0.0000, 0.3176, 0.9412]]]) tensor(1.) tensor(0.) . The values range from 0 to 1, with 0 representing black, 1 white and the values in between different shades of grey. We can also plot the tensor as an image using plt.imshow. . # Plot the image by passing in the 28x28 matrix plt.imshow(img_tensor[0,10:15,10:15], cmap=&#39;gray&#39;); . Note that we need to pass just the 28x28 matrix to plt.imshow, without a channel dimension. We also pass a color map (cmap=gray) to indicate that we want to see a grayscale image. . Training and Validation Datasets . While building real world machine learning models, it is quite common to split the dataset into 3 parts: . Training set - used to train the model i.e. compute the loss and adjust the weights of the model using gradient descent. | Validation set - used to evaluate the model while training, adjust hyperparameters (learning rate etc.) and pick the best version of the model. | Test set - used to compare different models, or different types of modeling approaches, and report the final accuracy of the model. | In the MNIST dataset, there are 60,000 training images, and 10,000 test images. The test set is standardized so that different researchers can report the results of their models against the same set of images. . Since there&#39;s no predefined validation set, we must manually split the 60,000 images into training and validation datasets. Let&#39;s set aside 10,000 randomly chosen images for validation. We can do this using the random_spilt method from PyTorch. . from torch.utils.data import random_split train_ds, val_ds = random_split(dataset, [50000, 10000]) len(train_ds), len(val_ds) . (50000, 10000) . It&#39;s important to choose a random sample for creating a validation set, because training data is often ordered by the target labels i.e. images of 0s, followed by images of 1s, followed by images of 2s and so on. If we were to pick a 20% validation set simply by selecting the last 20% of the images, the validation set would only consist of images of 8s and 9s, whereas the training set would contain no images of 8s and 9s. This would make it impossible to train a good model using the training set, which also performs well on the validation set (and on real world data). . We can now create data loaders to help us load the data in batches. We&#39;ll use a batch size of 128. . from torch.utils.data import DataLoader batch_size = 128 train_loader = DataLoader(train_ds, batch_size, shuffle=True) val_loader = DataLoader(val_ds, batch_size) . We set shuffle=True for the training dataloader, so that the batches generated in each epoch are different, and this randomization helps generalize &amp; speed up the training process. On the other hand, since the validation dataloader is used only for evaluating the model, there is no need to shuffle the images. . Model . Now that we have prepared our data loaders, we can define our model. . A logistic regression model is almost identical to a linear regression model i.e. there are weights and bias matrices, and the output is obtained using simple matrix operations (pred = x @ w.t() + b). . | Just as we did with linear regression, we can use nn.Linear to create the model instead of defining and initializing the matrices manually. . | Since nn.Linear expects the each training example to be a vector, each 1x28x28 image tensor needs to be flattened out into a vector of size 784 (28*28), before being passed into the model. . | The output for each image is vector of size 10, with each element of the vector signifying the probability a particular target label (i.e. 0 to 9). The predicted label for an image is simply the one with the highest probability. . | . import torch.nn as nn input_size = 28*28 num_classes = 10 # Logistic regression model model = nn.Linear(input_size, num_classes) . Of course, this model is a lot larger than our previous model, in terms of the number of parameters. Let&#39;s take a look at the weights and biases. . print(model.weight.shape) model.weight . torch.Size([10, 784]) . Parameter containing: tensor([[-0.0340, -0.0073, 0.0004, ..., -0.0137, 0.0321, -0.0312], [-0.0271, 0.0151, -0.0075, ..., 0.0081, -0.0111, 0.0115], [-0.0209, 0.0266, -0.0064, ..., -0.0092, 0.0238, -0.0321], ..., [-0.0180, 0.0254, 0.0102, ..., -0.0189, -0.0329, -0.0335], [ 0.0084, 0.0166, -0.0265, ..., 0.0047, -0.0005, 0.0071], [ 0.0030, -0.0307, -0.0251, ..., -0.0043, -0.0190, 0.0006]], requires_grad=True) . print(model.bias.shape) model.bias . torch.Size([10]) . Parameter containing: tensor([ 0.0108, -0.0052, -0.0086, 0.0152, -0.0349, -0.0343, 0.0144, -0.0142, 0.0272, -0.0102], requires_grad=True) . Although there are a total of 7850 parameters here, conceptually nothing has changed so far. Let&#39;s try and generate some outputs using our model. We&#39;ll take the first batch of 100 images from our dataset, and pass them into our model. . for images, labels in train_loader: print(labels) print(images.shape) outputs = model(images) break . tensor([1, 3, 8, 4, 4, 6, 0, 1, 5, 4, 5, 7, 8, 5, 0, 2, 8, 4, 2, 1, 9, 4, 3, 2, 7, 9, 3, 5, 2, 7, 1, 8, 2, 7, 3, 7, 1, 2, 1, 9, 7, 2, 4, 4, 8, 6, 4, 5, 8, 0, 0, 1, 4, 2, 4, 9, 6, 5, 1, 0, 7, 0, 2, 8, 4, 0, 2, 7, 5, 2, 9, 0, 7, 2, 8, 2, 4, 5, 5, 3, 2, 8, 8, 4, 2, 8, 1, 3, 6, 5, 8, 1, 3, 4, 0, 6, 2, 3, 3, 8, 5, 7, 7, 0, 3, 2, 1, 2, 1, 2, 5, 6, 4, 6, 5, 2, 1, 2, 9, 7, 3, 5, 0, 0, 6, 9, 1, 2]) torch.Size([128, 1, 28, 28]) . RuntimeError Traceback (most recent call last) &lt;ipython-input-19-72eddc737460&gt; in &lt;module&gt; 2 print(labels) 3 print(images.shape) -&gt; 4 outputs = model(images) 5 break ~/anaconda3/anaconda3/lib/python3.7/site-packages/torch/nn/modules/module.py in __call__(self, *input, **kwargs) 539 result = self._slow_forward(*input, **kwargs) 540 else: --&gt; 541 result = self.forward(*input, **kwargs) 542 for hook in self._forward_hooks.values(): 543 hook_result = hook(self, input, result) ~/anaconda3/anaconda3/lib/python3.7/site-packages/torch/nn/modules/linear.py in forward(self, input) 85 86 def forward(self, input): &gt; 87 return F.linear(input, self.weight, self.bias) 88 89 def extra_repr(self): ~/anaconda3/anaconda3/lib/python3.7/site-packages/torch/nn/functional.py in linear(input, weight, bias) 1370 ret = torch.addmm(bias, input, weight.t()) 1371 else: -&gt; 1372 output = input.matmul(weight.t()) 1373 if bias is not None: 1374 output += bias RuntimeError: size mismatch, m1: [3584 x 28], m2: [784 x 10] at /tmp/pip-req-build-9oilk29k/aten/src/TH/generic/THTensorMath.cpp:197 . This leads to an error, because our input data does not have the right shape. Our images are of the shape 1x28x28, but we need them to be vectors of size 784 i.e. we need to flatten them out. We&#39;ll use the .reshape method of a tensor, which will allow us to efficiently &#39;view&#39; each image as a flat vector, without really chaging the underlying data. . To include this additional functionality within our model, we need to define a custom model, by extending the nn.Module class from PyTorch. . class MnistModel(nn.Module): def __init__(self): super().__init__() self.linear = nn.Linear(input_size, num_classes) def forward(self, xb): xb = xb.reshape(-1, 784) out = self.linear(xb) return out model = MnistModel() . Inside the __init__ constructor method, we instantiate the weights and biases using nn.Linear. And inside the forward method, which is invoked when we pass a batch of inputs to the model, we flatten out the input tensor, and then pass it into self.linear. . xb.reshape(-1, 28*28) indicates to PyTorch that we want a view of the xb tensor with two dimensions, where the length along the 2nd dimension is 28*28 (i.e. 784). One argument to .reshape can be set to -1 (in this case the first dimension), to let PyTorch figure it out automatically based on the shape of the original tensor. . Note that the model no longer has .weight and .bias attributes (as they are now inside the .linear attribute), but it does have a .parameters method which returns a list containing the weights and bias, and can be used by a PyTorch optimizer. . print(model.linear.weight.shape, model.linear.bias.shape) list(model.parameters()) . torch.Size([10, 784]) torch.Size([10]) . [Parameter containing: tensor([[ 0.0326, -0.0242, 0.0328, ..., 0.0211, 0.0336, 0.0044], [ 0.0319, 0.0240, -0.0080, ..., -0.0257, -0.0172, 0.0092], [-0.0170, 0.0348, 0.0212, ..., -0.0084, -0.0094, 0.0216], ..., [-0.0351, 0.0058, 0.0352, ..., 0.0249, 0.0159, 0.0180], [-0.0162, -0.0113, 0.0337, ..., 0.0032, -0.0114, 0.0286], [ 0.0007, -0.0250, -0.0019, ..., 0.0169, -0.0235, 0.0341]], requires_grad=True), Parameter containing: tensor([-0.0342, -0.0062, 0.0184, -0.0016, 0.0148, -0.0352, 0.0334, 0.0340, -0.0016, -0.0256], requires_grad=True)] . Our new custom model can be used in the exact same way as before. Let&#39;s see if it works. . for images, labels in train_loader: outputs = model(images) break print(&#39;outputs.shape : &#39;, outputs.shape) print(&#39;Sample outputs : n&#39;, outputs[:2].data) . outputs.shape : torch.Size([128, 10]) Sample outputs : tensor([[ 0.2696, -0.2498, -0.0351, 0.2532, -0.1133, -0.1931, 0.0619, 0.1654, -0.1068, 0.2799], [ 0.1213, -0.0725, 0.0354, 0.1545, -0.1495, -0.1178, 0.1240, 0.0474, 0.0056, 0.3776]]) . For each of the 100 input images, we get 10 outputs, one for each class. As discussed earlier, we&#39;d like these outputs to represent probabilities, but for that the elements of each output row must lie between 0 to 1 and add up to 1, which is clearly not the case here. . To convert the output rows into probabilities, we use the softmax function, which has the following formula: . . First we replace each element yi in an output row by e^yi, which makes all the elements positive, and then we divide each element by the sum of all elements to ensure that they add up to 1. . While it&#39;s easy to implement the softmax function (you should try it!), we&#39;ll use the implementation that&#39;s provided within PyTorch, because it works well with multidimensional tensors (a list of output rows in our case). . import torch.nn.functional as F . The softmax function is included in the torch.nn.functional package, and requires us to specify a dimension along which the softmax must be applied. . # Apply softmax for each output row probs = F.softmax(outputs, dim=1) # Look at sample probabilities print(&quot;Sample probabilities: n&quot;, probs[:2].data) # Add up the probabilities of an output row print(&quot;Sum: &quot;, torch.sum(probs[0]).item()) . Sample probabilities: tensor([[0.1244, 0.0740, 0.0917, 0.1224, 0.0848, 0.0783, 0.1011, 0.1121, 0.0854, 0.1257], [0.1059, 0.0873, 0.0972, 0.1095, 0.0808, 0.0834, 0.1062, 0.0984, 0.0944, 0.1369]]) Sum: 1.0 . Finally, we can determine the predicted label for each image by simply choosing the index of the element with the highest probability in each output row. This is done using torch.max, which returns the largest element and the index of the largest element along a particular dimension of a tensor. . max_probs, preds = torch.max(probs, dim=1) print(preds) print(max_probs) . tensor([9, 9, 1, 5, 9, 6, 9, 9, 9, 9, 1, 9, 9, 9, 2, 7, 9, 4, 7, 6, 9, 6, 1, 3, 9, 2, 9, 6, 9, 9, 9, 6, 6, 8, 9, 9, 9, 6, 9, 9, 9, 9, 6, 9, 7, 9, 9, 9, 9, 9, 6, 1, 9, 9, 9, 9, 7, 5, 9, 5, 3, 4, 9, 8, 1, 9, 6, 1, 9, 6, 9, 7, 9, 6, 7, 9, 6, 3, 6, 9, 6, 9, 9, 9, 4, 3, 6, 6, 9, 9, 9, 9, 9, 9, 9, 2, 2, 9, 0, 9, 9, 9, 9, 1, 2, 7, 6, 8, 9, 9, 8, 9, 7, 7, 9, 4, 1, 9, 9, 9, 9, 9, 2, 4, 8, 9, 8, 6]) tensor([0.1257, 0.1369, 0.1130, 0.1181, 0.1405, 0.1214, 0.1269, 0.1172, 0.1294, 0.1435, 0.1152, 0.1198, 0.1360, 0.1411, 0.1192, 0.1221, 0.1302, 0.1432, 0.1208, 0.1220, 0.1397, 0.1264, 0.1123, 0.1247, 0.1301, 0.1250, 0.1419, 0.1113, 0.1381, 0.1236, 0.1552, 0.1295, 0.1267, 0.1277, 0.1361, 0.1617, 0.1281, 0.1433, 0.1381, 0.1358, 0.1481, 0.1170, 0.1132, 0.1351, 0.1276, 0.1297, 0.1223, 0.1378, 0.1230, 0.1317, 0.1264, 0.1240, 0.1255, 0.1389, 0.1250, 0.1616, 0.1377, 0.1427, 0.1194, 0.1211, 0.1170, 0.1243, 0.1286, 0.1295, 0.1652, 0.1648, 0.1271, 0.1303, 0.1301, 0.1210, 0.1276, 0.1137, 0.1274, 0.1114, 0.1200, 0.1195, 0.1129, 0.1337, 0.1163, 0.1287, 0.1303, 0.1356, 0.1682, 0.1565, 0.1267, 0.1333, 0.1417, 0.1387, 0.1663, 0.1162, 0.1507, 0.1318, 0.1218, 0.1599, 0.1385, 0.1224, 0.1176, 0.1239, 0.1344, 0.1276, 0.1220, 0.1279, 0.1597, 0.1421, 0.1135, 0.1210, 0.1257, 0.1279, 0.1274, 0.1312, 0.1467, 0.1203, 0.1133, 0.1120, 0.1381, 0.1216, 0.1362, 0.1253, 0.1439, 0.1208, 0.1306, 0.1266, 0.1243, 0.1218, 0.1364, 0.1205, 0.1205, 0.1295], grad_fn=&lt;MaxBackward0&gt;) . The numbers printed above are the predicted labels for the first batch of training images. Let&#39;s compare them with the actual labels. . labels . tensor([3, 3, 4, 2, 3, 1, 9, 7, 2, 0, 7, 1, 2, 3, 4, 1, 5, 8, 8, 1, 3, 1, 6, 2, 6, 4, 3, 4, 4, 1, 2, 1, 1, 0, 0, 3, 9, 3, 8, 7, 3, 2, 3, 3, 6, 2, 7, 8, 7, 0, 1, 6, 2, 6, 5, 0, 8, 5, 9, 4, 5, 0, 2, 4, 6, 0, 1, 8, 8, 1, 9, 7, 7, 6, 1, 7, 7, 3, 8, 6, 3, 2, 3, 4, 5, 2, 8, 1, 9, 8, 2, 7, 0, 0, 6, 5, 8, 1, 3, 5, 2, 8, 6, 4, 7, 5, 3, 7, 8, 8, 7, 5, 8, 5, 2, 7, 8, 7, 2, 6, 6, 7, 9, 5, 7, 1, 9, 7]) . Clearly, the predicted and the actual labels are completely different. Obviously, that&#39;s because we have started with randomly initialized weights and biases. We need to train the model i.e. adjust the weights using gradient descent to make better predictions. . Evaluation Metric and Loss Function . Just as with linear regression, we need a way to evaluate how well our model is performing. A natural way to do this would be to find the percentage of labels that were predicted correctly i.e. the accuracy of the predictions. . def accuracy(outputs, labels): _, preds = torch.max(outputs, dim=1) return torch.tensor(torch.sum(preds == labels).item() / len(preds)) . The == performs an element-wise comparison of two tensors with the same shape, and returns a tensor of the same shape, containing 0s for unequal elements, and 1s for equal elements. Passing the result to torch.sum returns the number of labels that were predicted correctly. Finally, we divide by the total number of images to get the accuracy. . Note that we don&#39;t need to apply softmax to the outputs, since it doesn&#39;t change the relative order of the results. This is because e^x is an increasing function i.e. if y1 &gt; y2, then e^y1 &gt; e^y2 and the same holds true after averaging out the values to get the softmax. . Let&#39;s calculate the accuracy of the current model, on the first batch of data. Obviously, we expect it to be pretty bad. . accuracy(outputs, labels) . tensor(0.0703) . While the accuracy is a great way for us (humans) to evaluate the model, it can&#39;t be used as a loss function for optimizing our model using gradient descent, for the following reasons: . It&#39;s not a differentiable function. torch.max and == are both non-continuous and non-differentiable operations, so we can&#39;t use the accuracy for computing gradients w.r.t the weights and biases. . | It doesn&#39;t take into account the actual probabilities predicted by the model, so it can&#39;t provide sufficient feedback for incremental improvements. . | Due to these reasons, accuracy is a great evaluation metric for classification, but not a good loss function. A commonly used loss function for classification problems is the cross entropy, which has the following formula: . . While it looks complicated, it&#39;s actually quite simple: . For each output row, pick the predicted probability for the correct label. E.g. if the predicted probabilities for an image are [0.1, 0.3, 0.2, ...] and the correct label is 1, we pick the corresponding element 0.3 and ignore the rest. . | Then, take the logarithm of the picked probability. If the probability is high i.e. close to 1, then its logarithm is a very small negative value, close to 0. And if the probability is low (close to 0), then the logarithm is a very large negative value. We also multiply the result by -1, which results is a large postive value of the loss for poor predictions. . | Finally, take the average of the cross entropy across all the output rows to get the overall loss for a batch of data. . | . Unlike accuracy, cross-entropy is a continuous and differentiable function that also provides good feedback for incremental improvements in the model (a slightly higher probability for the correct label leads to a lower loss). This makes it a good choice for the loss function. . As you might expect, PyTorch provides an efficient and tensor-friendly implementation of cross entropy as part of the torch.nn.functional package. Moreover, it also performs softmax internally, so we can directly pass in the outputs of the model without converting them into probabilities. . loss_fn = F.cross_entropy . # Loss for current batch of data loss = loss_fn(outputs, labels) print(loss) . tensor(2.2903, grad_fn=&lt;NllLossBackward&gt;) . Since the cross entropy is the negative logarithm of the predicted probability of the correct label averaged over all training samples, one way to interpret the resulting number e.g. 2.23 is look at e^-2.23 which is around 0.1 as the predicted probability of the correct label, on average. Lower the loss, better the model. . Training the model . Now that we have defined the data loaders, model, loss function and optimizer, we are ready to train the model. The training process is identical to linear regression, with the addition of a &quot;validation phase&quot; to evaluate the model in each epoch. Here&#39;s what it looks like in pseudocode: . for epoch in range(num_epochs): # Training phase for batch in train_loader: # Generate predictions # Calculate loss # Compute gradients # Update weights # Reset gradients # Validation phase for batch in val_loader: # Generate predictions # Calculate loss # Calculate metrics (accuracy etc.) # Calculate average validation loss &amp; metrics # Log epoch, loss &amp; metrics for inspection . Some parts of the training loop are specific the specific problem we&#39;re solving (e.g. loss function, metrics etc.) whereas others are generic and can be applied to any deep learning problem. Let&#39;s impelment the problem-specific parts within our MnistModel class: . class MnistModel(nn.Module): def __init__(self): super().__init__() self.linear = nn.Linear(input_size, num_classes) def forward(self, xb): xb = xb.reshape(-1, 784) out = self.linear(xb) return out def training_step(self, batch): images, labels = batch out = self(images) # Generate predictions loss = F.cross_entropy(out, labels) # Calculate loss return loss def validation_step(self, batch): images, labels = batch out = self(images) # Generate predictions loss = F.cross_entropy(out, labels) # Calculate loss acc = accuracy(out, labels) # Calculate accuracy return {&#39;val_loss&#39;: loss, &#39;val_acc&#39;: acc} def validation_epoch_end(self, outputs): batch_losses = [x[&#39;val_loss&#39;] for x in outputs] epoch_loss = torch.stack(batch_losses).mean() # Combine losses batch_accs = [x[&#39;val_acc&#39;] for x in outputs] epoch_acc = torch.stack(batch_accs).mean() # Combine accuracies return {&#39;val_loss&#39;: epoch_loss.item(), &#39;val_acc&#39;: epoch_acc.item()} def epoch_end(self, epoch, result): print(&quot;Epoch [{}], val_loss: {:.4f}, val_acc: {:.4f}&quot;.format(epoch, result[&#39;val_loss&#39;], result[&#39;val_acc&#39;])) model = MnistModel() . Now we&#39;ll define an evaluate function, which will perform the validation phase, and a fit function which will peform the entire training process. . def evaluate(model, val_loader): outputs = [model.validation_step(batch) for batch in val_loader] return model.validation_epoch_end(outputs) def fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD): history = [] optimizer = opt_func(model.parameters(), lr) for epoch in range(epochs): # Training Phase for batch in train_loader: loss = model.training_step(batch) loss.backward() optimizer.step() optimizer.zero_grad() # Validation phase result = evaluate(model, val_loader) model.epoch_end(epoch, result) history.append(result) return history . The fit function records the validation loss and metric from each epoch and returns a history of the training process. This is useful for debuggin &amp; visualizing the training process. Before we train the model, let&#39;s see how the model performs on the validation set with the initial set of randomly initialized weights &amp; biases. . Configurations like batch size, learning rate etc. need to picked in advance while training machine learning models, and are called hyperparameters. Picking the right hyperparameters is critical for training an accurate model within a reasonable amount of time, and is an active area of research and experimentation. Feel free to try different learning rates and see how it affects the training process. . result0 = evaluate(model, val_loader) result0 . {&#39;val_loss&#39;: 2.3143014907836914, &#39;val_acc&#39;: 0.12252768874168396} . The initial accuracy is around 10%, which is what one might expect from a randomly intialized model (since it has a 1 in 10 chance of getting a label right by guessing randomly). Also note that we are using the .format method with the message string to print only the first four digits after the decimal point. . We are now ready to train the model. Let&#39;s train for 5 epochs and look at the results. . history1 = fit(5, 0.001, model, train_loader, val_loader) . Epoch [0], val_loss: 1.9449, val_acc: 0.6085 Epoch [1], val_loss: 1.6736, val_acc: 0.7297 Epoch [2], val_loss: 1.4716, val_acc: 0.7669 Epoch [3], val_loss: 1.3195, val_acc: 0.7883 Epoch [4], val_loss: 1.2027, val_acc: 0.8009 . That&#39;s a great result! With just 5 epochs of training, our model has reached an accuracy of over 80% on the validation set. Let&#39;s see if we can improve that by training for a few more epochs. . history2 = fit(5, 0.001, model, train_loader, val_loader) . Epoch [0], val_loss: 1.1111, val_acc: 0.8094 Epoch [1], val_loss: 1.0376, val_acc: 0.8155 Epoch [2], val_loss: 0.9775, val_acc: 0.8229 Epoch [3], val_loss: 0.9275, val_acc: 0.8271 Epoch [4], val_loss: 0.8852, val_acc: 0.8311 . history3 = fit(5, 0.001, model, train_loader, val_loader) . Epoch [0], val_loss: 0.8489, val_acc: 0.8348 Epoch [1], val_loss: 0.8175, val_acc: 0.8372 Epoch [2], val_loss: 0.7899, val_acc: 0.8410 Epoch [3], val_loss: 0.7656, val_acc: 0.8451 Epoch [4], val_loss: 0.7440, val_acc: 0.8475 . history4 = fit(5, 0.001, model, train_loader, val_loader) . Epoch [0], val_loss: 0.7246, val_acc: 0.8489 Epoch [1], val_loss: 0.7071, val_acc: 0.8502 Epoch [2], val_loss: 0.6912, val_acc: 0.8517 Epoch [3], val_loss: 0.6767, val_acc: 0.8530 Epoch [4], val_loss: 0.6633, val_acc: 0.8549 . While the accuracy does continue to increase as we train for more epochs, the improvements get smaller with every epoch. This is easier to see using a line graph. . # Replace these values with your results history = [result0] + history1 + history2 + history3 + history4 accuracies = [result[&#39;val_acc&#39;] for result in history] plt.plot(accuracies, &#39;-x&#39;) plt.xlabel(&#39;epoch&#39;) plt.ylabel(&#39;accuracy&#39;) plt.title(&#39;Accuracy vs. No. of epochs&#39;); . It&#39;s quite clear from the above picture that the model probably won&#39;t cross the accuracy threshold of 90% even after training for a very long time. One possible reason for this is that the learning rate might be too high. It&#39;s possible that the model&#39;s paramaters are &quot;bouncing&quot; around the optimal set of parameters that have the lowest loss. You can try reducing the learning rate and training for a few more epochs to see if it helps. . The more likely reason that the model just isn&#39;t powerful enough. If you remember our initial hypothesis, we have assumed that the output (in this case the class probabilities) is a linear function of the input (pixel intensities), obtained by perfoming a matrix multiplication with the weights matrix and adding the bias. This is a fairly weak assumption, as there may not actually exist a linear relationship between the pixel intensities in an image and the digit it represents. While it works reasonably well for a simple dataset like MNIST (getting us to 85% accuracy), we need more sophisticated models that can capture non-linear relationships between image pixels and labels for complex tasks like recognizing everyday objects, animals etc. . Testing with individual images . While we have been tracking the overall accuracy of a model so far, it&#39;s also a good idea to look at model&#39;s results on some sample images. Let&#39;s test out our model with some images from the predefined test dataset of 10000 images. We begin by recreating the test dataset with the ToTensor transform. . # Define test dataset test_dataset = MNIST(root=&#39;input/&#39;, train=False, transform=transforms.ToTensor()) . Here&#39;s a sample image from the dataset. . img, label = test_dataset[0] plt.imshow(img[0], cmap=&#39;gray&#39;) print(&#39;Shape:&#39;, img.shape) print(&#39;Label:&#39;, label) . Shape: torch.Size([1, 28, 28]) Label: 7 . img.unsqueeze(0).shape . torch.Size([1, 1, 28, 28]) . Let&#39;s define a helper function predict_image, which returns the predicted label for a single image tensor. . def predict_image(img, model): xb = img.unsqueeze(0) yb = model(xb) _, preds = torch.max(yb, dim=1) return preds[0].item() . img.unsqueeze simply adds another dimension at the begining of the 1x28x28 tensor, making it a 1x1x28x28 tensor, which the model views as a batch containing a single image. . Let&#39;s try it out with a few images. . img, label = test_dataset[0] plt.imshow(img[0], cmap=&#39;gray&#39;) print(&#39;Label:&#39;, label, &#39;, Predicted:&#39;, predict_image(img, model)) . Label: 7 , Predicted: 7 . img, label = test_dataset[10] plt.imshow(img[0], cmap=&#39;gray&#39;) print(&#39;Label:&#39;, label, &#39;, Predicted:&#39;, predict_image(img, model)) . Label: 0 , Predicted: 0 . img, label = test_dataset[193] plt.imshow(img[0], cmap=&#39;gray&#39;) print(&#39;Label:&#39;, label, &#39;, Predicted:&#39;, predict_image(img, model)) . Label: 9 , Predicted: 4 . img, label = test_dataset[1839] plt.imshow(img[0], cmap=&#39;gray&#39;) print(&#39;Label:&#39;, label, &#39;, Predicted:&#39;, predict_image(img, model)) . Label: 2 , Predicted: 8 . Identifying where our model performs poorly can help us improve the model, by collecting more training data, increasing/decreasing the complexity of the model, and changing the hypeparameters. . As a final step, let&#39;s also look at the overall loss and accuracy of the model on the test set. . test_loader = DataLoader(test_dataset, batch_size=256) result = evaluate(model, test_loader) result . {&#39;val_loss&#39;: 0.6392550468444824, &#39;val_acc&#39;: 0.8604491949081421} . We expect this to be similar to the accuracy/loss on the validation set. If not, we might need a better validation set that has similar data and distribution as the test set (which often comes from real world data). . Saving and loading the model . Since we&#39;ve trained our model for a long time and achieved a resonable accuracy, it would be a good idea to save the weights and bias matrices to disk, so that we can reuse the model later and avoid retraining from scratch. Here&#39;s how you can save the model. . torch.save(model.state_dict(), &#39;mnist-logistic.pth&#39;) . The .state_dict method returns an OrderedDict containing all the weights and bias matrices mapped to the right attributes of the model. . model.state_dict() . OrderedDict([(&#39;linear.weight&#39;, tensor([[ 0.0296, -0.0041, 0.0257, ..., 0.0303, -0.0330, 0.0052], [ 0.0164, -0.0157, -0.0077, ..., -0.0346, 0.0066, -0.0356], [-0.0038, -0.0140, -0.0217, ..., 0.0150, -0.0302, -0.0238], ..., [-0.0236, -0.0244, -0.0155, ..., 0.0221, 0.0302, 0.0096], [-0.0033, 0.0143, 0.0190, ..., 0.0286, 0.0005, -0.0238], [-0.0305, 0.0268, -0.0245, ..., 0.0284, 0.0114, 0.0056]])), (&#39;linear.bias&#39;, tensor([-0.0770, 0.0845, -0.0486, -0.0196, 0.0406, 0.0722, -0.0069, 0.0436, -0.0622, -0.0075]))]) . To load the model weights, we can instante a new object of the class MnistModel, and use the .load_state_dict method. . model2 = MnistModel() model2.load_state_dict(torch.load(&#39;mnist-logistic.pth&#39;)) model2.state_dict() . OrderedDict([(&#39;linear.weight&#39;, tensor([[ 0.0296, -0.0041, 0.0257, ..., 0.0303, -0.0330, 0.0052], [ 0.0164, -0.0157, -0.0077, ..., -0.0346, 0.0066, -0.0356], [-0.0038, -0.0140, -0.0217, ..., 0.0150, -0.0302, -0.0238], ..., [-0.0236, -0.0244, -0.0155, ..., 0.0221, 0.0302, 0.0096], [-0.0033, 0.0143, 0.0190, ..., 0.0286, 0.0005, -0.0238], [-0.0305, 0.0268, -0.0245, ..., 0.0284, 0.0114, 0.0056]])), (&#39;linear.bias&#39;, tensor([-0.0770, 0.0845, -0.0486, -0.0196, 0.0406, 0.0722, -0.0069, 0.0436, -0.0622, -0.0075]))]) . Just as a sanity check, let&#39;s verify that this model has the same loss and accuracy on the test set as before. . test_loader = DataLoader(test_dataset, batch_size=256) result = evaluate(model2, test_loader) result . {&#39;val_loss&#39;: 0.6392550468444824, &#39;val_acc&#39;: 0.8604491949081421} . Summary and Further Reading . We&#39;ve created a fairly sophisticated training and evaluation pipeline in this tutorial. Here&#39;s a list of the topics we&#39;ve covered: . Working with images in PyTorch (using the MNIST dataset) | Splitting a dataset into training, validation and test sets | Creating PyTorch models with custom logic by extending the nn.Module class | Interpreting model ouputs as probabilities using softmax, and picking predicted labels | Picking a good evaluation metric (accuracy) and loss function (cross entropy) for classification problems | Setting up a training loop that also evaluates the model using the validation set | Testing the model manually on randomly picked examples | Saving and loading model checkpoints to avoid retraining from scratch | . There&#39;s a lot of scope to experiment here, and I encourage you to use the interactive nature of Jupyter to play around with the various parameters. Here are a few ideas: . Try making the validation set smaller or larger, and see how it affects the model. | Try changing the learning rate and see if you can achieve the same accuracy in fewer epochs. | Try changing the batch size. What happens if you use too high a batch size, or too low? | Modify the fit function to also track the overall loss and accuracy on the training set, and see how it compares with the validation loss/accuracy. Can you explain why it&#39;s lower/higher? | Train with a small subset of the data, and see if you can reach a similar level of accuracy. | Try building a model for a different dataset, such as the CIFAR10 or CIFAR100 datasets. | . Here are some references for further reading: . For a more mathematical treatment, see the popular Machine Learning course on Coursera. Most of the images used in this tutorial series have been taken from this course. | The training loop defined in this notebook was inspired from FastAI development notebooks which contain a wealth of other useful stuff if you can read and understand the code. | For a deep dive into softmax and cross entropy, see this blog post on DeepNotes. | . Reference/Credits: . This is the lecture material from the online course taught on Youtube - Link .",
            "url": "https://mlblog.singhsarbjit.com/deep_learning/2020/08/22/Logistic_Regression_Pytorch.html",
            "relUrl": "/deep_learning/2020/08/22/Logistic_Regression_Pytorch.html",
            "date": " • Aug 22, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Linear Regression with PyTorch",
            "content": "Linear Regression . In a linear regression model, each target variable is estimated to be a weighted sum of the input variables, offset by some constant, known as a bias : . yield_apple = w11 * temp + w12 * rainfall + w13 * humidity + b1 yield_orange = w21 * temp + w22 * rainfall + w23 * humidity + b2 . The learning part of linear regression is to figure out a set of weights w11, w12,... w23, b1 &amp; b2 by looking at the training data, to make accurate predictions for new data (i.e. to predict the yields for apples and oranges in a new region using the average temperature, rainfall and humidity). This is done by adjusting the weights slightly many times to make better predictions, using an optimization technique called gradient descent. . We begin by importing Numpy and PyTorch: . import numpy as np import torch . Training data . The training data can be represented using 2 matrices: inputs and targets, each with one row per observation, and one column per variable. Let&#39;s assume some random data for temp, rainfall and humidity being represented in a numpy array. . # Input (temp, rainfall, humidity) inputs = np.array([[73, 67, 43], [91, 88, 64], [87, 134, 58], [102, 43, 37], [69, 96, 70]], dtype=&#39;float32&#39;) . # Targets (apples, oranges) targets = np.array([[56, 70], [81, 101], [119, 133], [22, 37], [103, 119]], dtype=&#39;float32&#39;) . Let&#39;s convert these to tensors now. . # Convert inputs and targets to tensors inputs = torch.from_numpy(inputs) targets = torch.from_numpy(targets) print(inputs) print(targets) . tensor([[ 73., 67., 43.], [ 91., 88., 64.], [ 87., 134., 58.], [102., 43., 37.], [ 69., 96., 70.]]) tensor([[ 56., 70.], [ 81., 101.], [119., 133.], [ 22., 37.], [103., 119.]]) . Linear regression model from&#160;scratch . The weights and biases (w11, w12,... w23, b1 &amp; b2) can also be represented as matrices, initialized as random values. The first row of w and the first element of b are used to predict the first target variable i.e. yield of apples, and similarly the second for oranges. . # Weights and biases w = torch.randn(2, 3, requires_grad=True) b = torch.randn(2, requires_grad=True) print(w) print(b) . tensor([[ 0.0991, 0.9799, -0.9378], [-0.4636, -0.4386, -0.7802]], requires_grad=True) tensor([-0.5751, -0.7712], requires_grad=True) . torch.randn creates a tensor with the given shape, with elements picked randomly from a normal distribution with mean 0 and standard deviation 1. . Our model is simply a function that performs a matrix multiplication of the inputs and the weights w (transposed) and adds the bias b (replicated for each observation). . . We can define the model as follows: . def model(x): return x @ w.t() + b . @ represents matrix multiplication in PyTorch, and the .t method returns the transpose of a tensor. . The matrix obtained by passing the input data into the model is a set of predictions for the target variables. . # Generate predictions preds = model(inputs) print(preds) . tensor([[ 31.9884, -97.5489], [ 34.6570, -131.4889], [ 84.9622, -145.1297], [ 16.9713, -95.7842], [ 34.6894, -129.4807]], grad_fn=&lt;AddBackward0&gt;) . Let&#39;s compare the predictions of our model with the actual targets. . # Compare with targets print(targets) . tensor([[ 56., 70.], [ 81., 101.], [119., 133.], [ 22., 37.], [103., 119.]]) . You can see that there&#39;s a huge difference between the predictions of our model, and the actual values of the target variables. Obviously, this is because we&#39;ve initialized our model with random weights and biases, and we can&#39;t expect it to just work. . Loss function . Before we improve our model, we need a way to evaluate how well our model is performing. We can compare the model&#39;s predictions with the actual targets, using the following method: . Calculate the difference between the two matrices (preds and targets). | Square all elements of the difference matrix to remove negative values. | Calculate the average of the elements in the resulting matrix. | . The result is a single number, known as the mean squared error (MSE). . # MSE loss def mse(t1, t2): diff = t1 - t2 return torch.sum(diff * diff) / diff.numel() . torch.sum returns the sum of all the elements in a tensor, and the .numel method returns the number of elements in a tensor. Let&#39;s compute the mean squared error for the current predictions of our model. . # Compute loss loss = mse(preds, targets) print(loss) . tensor(24742.8535, grad_fn=&lt;DivBackward0&gt;) . Here’s how we can interpret the result: On average, each element in the prediction differs from the actual target by about 145 (square root of the loss 24742). And that’s pretty bad, considering the numbers we are trying to predict are themselves in the range 50–200. Also, the result is called the loss, because it indicates how bad the model is at predicting the target variables. Lower the loss, better the model. . Compute gradients . With PyTorch, we can automatically compute the gradient or derivative of the loss w.r.t. to the weights and biases, because they have requires_grad set to True. . # Compute gradients loss.backward() . The gradients are stored in the .grad property of the respective tensors. Note that the derivative of the loss w.r.t. the weights matrix is itself a matrix, with the same dimensions. . # Gradients for weights print(w) print(w.grad) . tensor([[ 0.0991, 0.9799, -0.9378], [-0.4636, -0.4386, -0.7802]], requires_grad=True) tensor([[ -2831.5396, -3404.4133, -2188.0879], [-17654.8008, -19703.6074, -12104.4150]]) . The loss is a quadratic function of our weights and biases, and our objective is to find the set of weights where the loss is the lowest. If we plot a graph of the loss w.r.t any individual weight or bias element, it will look like the figure shown below. A key insight from calculus is that the gradient indicates the rate of change of the loss, or the slope of the loss function w.r.t. the weights and biases. . If a gradient element is positive: . increasing the element&#39;s value slightly will increase the loss. | decreasing the element&#39;s value slightly will decrease the loss | . . If a gradient element is negative: . increasing the element&#39;s value slightly will decrease the loss. | decreasing the element&#39;s value slightly will increase the loss. | . . The increase or decrease in loss by changing a weight element is proportional to the value of the gradient of the loss w.r.t. that element. This forms the basis for the optimization algorithm that we&#39;ll use to improve our model. . Before we proceed, we reset the gradients to zero by calling .zero_() method. We need to do this, because PyTorch accumulates, gradients i.e. the next time we call .backward on the loss, the new gradient values will get added to the existing gradient values, which may lead to unexpected results. . w.grad.zero_() b.grad.zero_() print(w.grad) print(b.grad) . tensor([[0., 0., 0.], [0., 0., 0.]]) tensor([0., 0.]) . Adjust weights and biases using gradient&#160;descent . We&#39;ll reduce the loss and improve our model using the gradient descent optimization algorithm, which has the following steps: . Generate predictions . | Calculate the loss . | Compute gradients w.r.t the weights and biases . | Adjust the weights by subtracting a small quantity proportional to the gradient . | Reset the gradients to zero . | Let&#39;s implement the above step by step. . # Generate predictions preds = model(inputs) print(preds) . tensor([[ 31.9884, -97.5489], [ 34.6570, -131.4889], [ 84.9622, -145.1297], [ 16.9713, -95.7842], [ 34.6894, -129.4807]], grad_fn=&lt;AddBackward0&gt;) . Note that the predictions are same as before, since we haven&#39;t made any changes to our model. The same holds true for the loss and gradients. . # Calculate the loss loss = mse(preds, targets) print(loss) . tensor(24742.8535, grad_fn=&lt;DivBackward0&gt;) . # Compute gradients loss.backward() print(w.grad) print(b.grad) . tensor([[ -2831.5396, -3404.4133, -2188.0879], [-17654.8008, -19703.6074, -12104.4150]]) tensor([ -35.5463, -211.8865]) . Finally, we update the weights and biases using the gradients computed above. . # Adjust weights &amp; reset gradients with torch.no_grad(): w -= w.grad * 1e-5 b -= b.grad * 1e-5 w.grad.zero_() b.grad.zero_() . A few things to note above: . We use torch.no_grad to indicate to PyTorch that we shouldn&#39;t track, calculate or modify gradients while updating the weights and biases.  . | We multiply the gradients with a really small number (10^-5 in this case), to ensure that we don&#39;t modify the weights by a really large amount, since we only want to take a small step in the downhill direction of the gradient. This number is called the learning rate of the algorithm.  . | After we have updated the weights, we reset the gradients back to zero, to avoid affecting any future computations. . | . Let&#39;s take a look at the new weights and biases. . print(w) print(b) . tensor([[ 0.1274, 1.0139, -0.9159], [-0.2870, -0.2416, -0.6592]], requires_grad=True) tensor([-0.5748, -0.7691], requires_grad=True) . With the new weights and biases, the model should have lower loss. . # Calculate loss preds = model(inputs) loss = mse(preds, targets) print(loss) . tensor(16813.5664, grad_fn=&lt;DivBackward0&gt;) . We have already achieved a significant reduction in the loss, simply by adjusting the weights and biases slightly using gradient descent. . Train for multiple&#160;epochs . To reduce the loss further, we can repeat the process of adjusting the weights and biases using the gradients multiple times. Each iteration is called an epoch. Let&#39;s train the model for 100 epochs. . # Train for 100 epochs for i in range(100): preds = model(inputs) loss = mse(preds, targets) loss.backward() with torch.no_grad(): w -= w.grad * 1e-5 b -= b.grad * 1e-5 w.grad.zero_() b.grad.zero_() . Once again, let&#39;s verify that the loss is now lower: . # Calculate loss preds = model(inputs) loss = mse(preds, targets) print(loss) . tensor(219.8388, grad_fn=&lt;DivBackward0&gt;) . As you can see, the loss is now much lower than what we started out with. Let&#39;s look at the model&#39;s predictions and compare them with the targets. . # Predictions preds . tensor([[ 59.9863, 74.3278], [ 73.4394, 96.7516], [134.0960, 135.4074], [ 36.9610, 60.4441], [ 77.2880, 98.4986]], grad_fn=&lt;AddBackward0&gt;) . # Targets targets . tensor([[ 56., 70.], [ 81., 101.], [119., 133.], [ 22., 37.], [103., 119.]]) . The prediction are now quite close to the target variables, and we can get even better results by training for a few more epochs. . Linear regression using PyTorch built-ins . The model and training process above were implemented using basic matrix operations. But since this such a common pattern , PyTorch has several built-in functions and classes to make it easy to create and train models. . Let&#39;s begin by importing the torch.nn package from PyTorch, which contains utility classes for building neural networks. . import torch.nn as nn . As before, we represent the inputs and targets and matrices. . # Input (temp, rainfall, humidity) inputs = np.array([[73, 67, 43], [91, 88, 64], [87, 134, 58], [102, 43, 37], [69, 96, 70], [73, 67, 43], [91, 88, 64], [87, 134, 58], [102, 43, 37], [69, 96, 70], [73, 67, 43], [91, 88, 64], [87, 134, 58], [102, 43, 37], [69, 96, 70]], dtype=&#39;float32&#39;) # Targets (apples, oranges) targets = np.array([[56, 70], [81, 101], [119, 133], [22, 37], [103, 119], [56, 70], [81, 101], [119, 133], [22, 37], [103, 119], [56, 70], [81, 101], [119, 133], [22, 37], [103, 119]], dtype=&#39;float32&#39;) inputs = torch.from_numpy(inputs) targets = torch.from_numpy(targets) . inputs . tensor([[ 73., 67., 43.], [ 91., 88., 64.], [ 87., 134., 58.], [102., 43., 37.], [ 69., 96., 70.], [ 73., 67., 43.], [ 91., 88., 64.], [ 87., 134., 58.], [102., 43., 37.], [ 69., 96., 70.], [ 73., 67., 43.], [ 91., 88., 64.], [ 87., 134., 58.], [102., 43., 37.], [ 69., 96., 70.]]) . We are using 15 training examples this time, to illustrate how to work with large datasets in small batches. . Dataset and DataLoader . We&#39;ll create a TensorDataset, which allows access to rows from inputs and targets as tuples, and provides standard APIs for working with many different types of datasets in PyTorch. . from torch.utils.data import TensorDataset . # Define dataset train_ds = TensorDataset(inputs, targets) train_ds[0:3] . (tensor([[ 73., 67., 43.], [ 91., 88., 64.], [ 87., 134., 58.]]), tensor([[ 56., 70.], [ 81., 101.], [119., 133.]])) . The TensorDataset allows us to access a small section of the training data using the array indexing notation ([0:3] in the above code). It returns a tuple (or pair), in which the first element contains the input variables for the selected rows, and the second contains the targets. . We&#39;ll also create a DataLoader, which can split the data into batches of a predefined size while training. It also provides other utilities like shuffling and random sampling of the data. . from torch.utils.data import DataLoader . # Define data loader batch_size = 5 train_dl = DataLoader(train_ds, batch_size, shuffle=True) . The data loader is typically used in a for-in loop. Let&#39;s look at an example. . for xb, yb in train_dl: print(xb) print(yb) break . tensor([[ 91., 88., 64.], [ 73., 67., 43.], [ 69., 96., 70.], [ 87., 134., 58.], [ 69., 96., 70.]]) tensor([[ 81., 101.], [ 56., 70.], [103., 119.], [119., 133.], [103., 119.]]) . In each iteration, the data loader returns one batch of data, with the given batch size. If shuffle is set to True, it shuffles the training data before creating batches. Shuffling helps randomize the input to the optimization algorithm, which can lead to faster reduction in the loss. . nn.Linear . Instead of initializing the weights &amp; biases manually, we can define the model using the nn.Linear class from PyTorch, which does it automatically. . # Define model model = nn.Linear(3, 2) print(model.weight) print(model.bias) . Parameter containing: tensor([[ 0.4430, -0.4030, -0.5242], [ 0.4627, 0.0753, 0.4662]], requires_grad=True) Parameter containing: tensor([0.5011, 0.1109], requires_grad=True) . PyTorch models also have a helpful .parameters method, which returns a list containing all the weights and bias matrices present in the model. For our linear regression model, we have one weight matrix and one bias matrix. . # Parameters list(model.parameters()) . [Parameter containing: tensor([[ 0.4430, -0.4030, -0.5242], [ 0.4627, 0.0753, 0.4662]], requires_grad=True), Parameter containing: tensor([0.5011, 0.1109], requires_grad=True)] . We can use the model to generate predictions in the exact same way as before: . # Generate predictions preds = model(inputs) preds . tensor([[-16.7046, 58.9756], [-28.2028, 78.6743], [-45.3696, 77.4884], [ 8.9606, 67.7903], [-44.3184, 71.8943], [-16.7046, 58.9756], [-28.2028, 78.6743], [-45.3696, 77.4884], [ 8.9606, 67.7903], [-44.3184, 71.8943], [-16.7046, 58.9756], [-28.2028, 78.6743], [-45.3696, 77.4884], [ 8.9606, 67.7903], [-44.3184, 71.8943]], grad_fn=&lt;AddmmBackward&gt;) . Loss Function . Instead of defining a loss function manually, we can use the built-in loss function mse_loss. . # Import nn.functional import torch.nn.functional as F . The nn.functional package contains many useful loss functions and several other utilities. . # Define loss function loss_fn = F.mse_loss . Let&#39;s compute the loss for the current predictions of our model. . loss = loss_fn(model(inputs), targets) print(loss) . tensor(7296.9834, grad_fn=&lt;MseLossBackward&gt;) . Optimizer . Instead of manually manipulating the model&#39;s weights &amp; biases using gradients, we can use the optimizer optim.SGD. SGD stands for stochastic gradient descent. It is called stochastic because samples are selected in batches (often with random shuffling) instead of as a single group. . # Define optimizer opt = torch.optim.SGD(model.parameters(), lr=1e-5) . Note that model.parameters() is passed as an argument to optim.SGD, so that the optimizer knows which matrices should be modified during the update step. Also, we can specify a learning rate which controls the amount by which the parameters are modified. . Train the model . We are now ready to train the model. We&#39;ll follow the exact same process to implement gradient descent: . Generate predictions . | Calculate the loss . | Compute gradients w.r.t the weights and biases . | Adjust the weights by subtracting a small quantity proportional to the gradient . | Reset the gradients to zero . | The only change is that we&#39;ll work batches of data, instead of processing the entire training data in every iteration. Let&#39;s define a utility function fit which trains the model for a given number of epochs. . # Utility function to train the model def fit(num_epochs, model, loss_fn, opt, train_dl): # Repeat for given number of epochs for epoch in range(num_epochs): # Train with batches of data for xb,yb in train_dl: # 1. Generate predictions pred = model(xb) # 2. Calculate loss loss = loss_fn(pred, yb) # 3. Compute gradients loss.backward() # 4. Update parameters using gradients opt.step() # 5. Reset the gradients to zero opt.zero_grad() # Print the progress if (epoch+1) % 10 == 0: print(&#39;Epoch [{}/{}], Loss: {:.4f}&#39;.format(epoch+1, num_epochs, loss.item())) . Some things to note above: . We use the data loader defined earlier to get batches of data for every iteration. . | Instead of updating parameters (weights and biases) manually, we use opt.step to perform the update, and opt.zero_grad to reset the gradients to zero. . | We&#39;ve also added a log statement which prints the loss from the last batch of data for every 10th epoch, to track the progress of training. loss.item returns the actual value stored in the loss tensor. . | . Let&#39;s train the model for 100 epochs. . fit(100, model, loss_fn, opt, train_dl) . Epoch [10/100], Loss: 866.8568 Epoch [20/100], Loss: 563.1091 Epoch [30/100], Loss: 316.7956 Epoch [40/100], Loss: 128.2728 Epoch [50/100], Loss: 305.4437 Epoch [60/100], Loss: 185.6665 Epoch [70/100], Loss: 101.3508 Epoch [80/100], Loss: 36.5605 Epoch [90/100], Loss: 84.5572 Epoch [100/100], Loss: 54.1609 . Let&#39;s generate predictions using our model and verify that they&#39;re close to our targets. . # Generate predictions preds = model(inputs) preds . tensor([[ 59.5274, 71.7325], [ 79.2080, 99.9687], [121.6579, 132.1071], [ 33.9094, 45.1424], [ 89.3203, 113.2075], [ 59.5274, 71.7325], [ 79.2080, 99.9687], [121.6579, 132.1071], [ 33.9094, 45.1424], [ 89.3203, 113.2075], [ 59.5274, 71.7325], [ 79.2080, 99.9687], [121.6579, 132.1071], [ 33.9094, 45.1424], [ 89.3203, 113.2075]], grad_fn=&lt;AddmmBackward&gt;) . # Compare with targets targets . tensor([[ 56., 70.], [ 81., 101.], [119., 133.], [ 22., 37.], [103., 119.], [ 56., 70.], [ 81., 101.], [119., 133.], [ 22., 37.], [103., 119.], [ 56., 70.], [ 81., 101.], [119., 133.], [ 22., 37.], [103., 119.]]) . Indeed, the predictions are quite close to our targets, and now we have a fairly good model to predict crop yields for apples and oranges by looking at the average temperature, rainfall and humidity in a region. . Reference / Credits : . This is the lecture material from the online course taught on Youtube - Link .",
            "url": "https://mlblog.singhsarbjit.com/deep_learning/2020/06/19/linear_regression_pytorch.html",
            "relUrl": "/deep_learning/2020/06/19/linear_regression_pytorch.html",
            "date": " • Jun 19, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Basic introduction to Pytorch",
            "content": "What is Pytorch? . Pytorch is an open-source machine learning library developed by Facebook. It allows flexibility and speed for scientific computing for deep learning. Consider it as a replacement of Numpy so that the GPU capability can be used. . Tensors? . Tensor is the core element of Pytorch and are basically a n-dimensional data container much like Numpy&#39;s n-dimensional array. A tensor could be a number, vector, matrix or a n-dimensional array. . import torch # Scalar - Integer t1 = torch.tensor(5) print(&quot;Tensor is {} with shape {} and data type {}&quot;.format(t1, t1.shape, t1.dtype)) . Tensor is 5 with shape torch.Size([]) and data type torch.int64 . # Scalar - Float t2 = torch.tensor(5.) print(&quot;Tensor is {} with shape {} and data type {}&quot;.format(t2, t2.shape, t2.dtype)) . Tensor is 5.0 with shape torch.Size([]) and data type torch.float32 . # Vector t3 = torch.tensor([1., 2, 3]) print(&quot;Tensor is {} with shape {} and data type {}&quot;.format(t3, t3.shape, t3.dtype)) t4 = torch.tensor([1, 2, 3]) print(&quot;Tensor is {} with shape {} and data type {}&quot;.format(t4, t4.shape, t4.dtype)) . Tensor is tensor([1., 2., 3.]) with shape torch.Size([3]) and data type torch.float32 Tensor is tensor([1, 2, 3]) with shape torch.Size([3]) and data type torch.int64 . # Matrix t5 = torch.tensor([[1., 2, 3],[4, 5, 6]]) print(&quot;Tensor is {} with shape {} and data type {}&quot;.format(t5, t5.shape, t5.dtype)) t6 = torch.tensor([[1, 2, 3],[4, 5, 6]]) print(&quot;Tensor is {} with shape {} and data type {}&quot;.format(t6, t6.shape, t6.dtype)) . Tensor is tensor([[1., 2., 3.], [4., 5., 6.]]) with shape torch.Size([2, 3]) and data type torch.float32 Tensor is tensor([[1, 2, 3], [4, 5, 6]]) with shape torch.Size([2, 3]) and data type torch.int64 . Creating tensors using torch.Tensor &amp; torch.tensor : . torch.Tensor is the main Tensor class and everything is an instance of it. You can use it to create an empty tensor which is not possible with torch.tensor. . # Creating tensors using torch.Tensor class # Create a tensor with 3 elements and random data t7 = torch.Tensor(3) print(&quot;Tensor is {} with shape {} and data type {}&quot;.format(t7, t7.shape, t7.dtype)) # Matrix - 2X3 with random data t8 = torch.Tensor(2, 3) print(&quot;Tensor is {} with shape {} and data type {}&quot;.format(t8, t8.shape, t8.dtype)) # 2X3 Matrix with data t9 = torch.Tensor([[1, 2], [3, 4]]) print(&quot;Tensor is {} with shape {} and data type {}&quot;.format(t9, t9.shape, t9.dtype)) . Tensor is tensor([9.8755e-35, 1.4013e-45, 1.3633e-41]) with shape torch.Size([3]) and data type torch.float32 Tensor is tensor([[ 0.0000e+00, -2.0000e+00, 0.0000e+00], [-2.0000e+00, 8.4078e-45, -2.0000e+00]]) with shape torch.Size([2, 3]) and data type torch.float32 Tensor is tensor([[1., 2.], [3., 4.]]) with shape torch.Size([2, 2]) and data type torch.float32 . # Arithemetic operations a = torch.tensor(1) b = torch.tensor(2) c = torch.tensor(3) y = a + b + c print(y) # Derivatives a = torch.tensor(1.) b = torch.tensor(2., requires_grad=True) c = torch.tensor(3., requires_grad=True) y = a + b + c print(y) . tensor(6) tensor(6., grad_fn=&lt;AddBackward0&gt;) . Pytorch allows you to not only run the tensors in CPU but also in GPU for speed. Also, it got some unique features to track operations applied on them by forming backward graph for the tensors having requires_grad property set to True. . So basically, you can calculate the derivative of the &quot;y&quot; with respect to the other tensors having requires_grad by calling .backward method. Derivative is stored in a variable .grad associated with each tensor. . y.backward() print(&#39;dy/da:&#39;, a.grad) print(&#39;dy/db:&#39;, b.grad) print(&#39;dy/dc:&#39;, c.grad) . dy/da: None dy/db: tensor(1.) dy/dc: tensor(1.) . Numpy and Pytorch . We can quickly create tensors from Numpy arrays. . import numpy as np # Convert Numpy array to tensor a1 = np.array([[1, 2, 4.], [5, 6, 7]]) t = torch.from_numpy(a1) print(&quot;Tensor is {} with shape {} and data type {}&quot;.format(t, t.shape, t.dtype)) . Tensor is tensor([[1., 2., 4.], [5., 6., 7.]], dtype=torch.float64) with shape torch.Size([2, 3]) and data type torch.float64 . # Convert tensor to Numpy array a2 = t.numpy() print(a2) . [[1. 2. 4.] [5. 6. 7.]] .",
            "url": "https://mlblog.singhsarbjit.com/deep_learning/2020/06/09/Basic_Introduction_to_Pytorch.html",
            "relUrl": "/deep_learning/2020/06/09/Basic_Introduction_to_Pytorch.html",
            "date": " • Jun 9, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Evaluation metrics for Linear Regression",
            "content": "Assume we have following set of data . X Y . 20 | 23 | . 21 | 21 | . 22 | 26 | . 23 | 22 | . 24 | 25 | . 25 | 24 | . For this data, we get this linear regression using this calculator . y = 15.14 + 0.37x . We can solve this equation and get the value of $ hat y$ . X Y $ hat Y$ . 20 | 23 | 22.54 | . 21 | 21 | 22.91 | . 22 | 26 | 23.28 | . 23 | 22 | 23.65 | . 24 | 25 | 24.02 | . 25 | 24 | 24.39 | . We can evaluate this regression line in terms of different error metrics :- . MAE (Mean Absolute Error) :- . $$MAE = ( frac{1}{n}) sum_{i=1}^{n} left | y_{i} - hat y_{i} right |$$ . where y = actual value in the data set ; $ hat y$ = value computed by solving the regression equation . Calculate the difference between Y and $ hat Y$ | Get the absolute values | Take the mean/average i.e. divide by number of elements | X = [20, 21, 22, 23, 24, 25] Y = [23, 21, 26, 22, 25, 24] Y_BAR = [22.54, 22.91, 23.28, 23.65, 24.02, 24.39] # Core Python n = len(X) # Use length of either X or Y to get number of elements s = 0 for i in range(0,n): s += abs(Y[i] - Y_BAR[i]) MAE = s/n print (&quot;MAE using Python: %&quot;, MAE) # Using Scikit-Learn Library from sklearn.metrics import mean_absolute_error MAE_sci = mean_absolute_error(Y, Y_BAR) print (&quot;MAE using Sklearn: % &quot;, MAE_sci) # Using Numpy import numpy as np MAE_numpy = np.mean(np.abs(np.subtract(Y,Y_BAR))) print (&quot;MAE using Numpy: % &quot;, MAE_numpy) . MAE using Python: % 1.3516666666666666 MAE using Sklearn: % 1.3516666666666666 MAE using Numpy: % 1.3516666666666666 . MSE (Mean Square Error) :- . $$MSE = ( frac{1}{n}) sum_{i=1}^{n} left ( y_{i} - hat y_{i} right )^2$$ . where y = actual value in the data set ; $ hat y$ = value computed by solving the regression equation . Calculate the difference between Y and $ hat Y$ | Take a square | Take the mean/average i.e. divide by number of elements | X = [20, 21, 22, 23, 24, 25] Y = [23, 21, 26, 22, 25, 24] Y_BAR = [22.54, 22.91, 23.28, 23.65, 24.02, 24.39] # Core Python n = len(X) # Use length of either X or Y to get number of elements s = 0 for i in range(0,n): s += (Y[i] - Y_BAR[i])**2 MSE = s/n print (&quot;MSE using Python: %&quot;, MSE) # Using Scikit-Learn Library from sklearn.metrics import mean_squared_error MSE_sci = mean_squared_error(Y, Y_BAR) print (&quot;MSE using Sklearn: % &quot;, MSE_sci) # Using Numpy import numpy as np MSE_numpy = np.mean(np.square(np.subtract(Y,Y_BAR))) print (&quot;MSE using Numpy: % &quot;, MSE_numpy) . MSE using Python: % 2.5155166666666653 MSE using Sklearn: % 2.5155166666666653 MSE using Numpy: % 2.5155166666666653 . RMSE (Root Mean Square Error) :- . $$RMSE = sqrt{( frac{1}{n}) sum_{i=1}^{n} left ( y_{i} - hat y_{i} right )^2}$$ . where y = actual value in the data set ; $ hat y$ = value computed by solving the regression equation . Calculate the difference between Y and $ hat Y$ | Take a square | Take the mean/average i.e. divide by number of elements | Take the square root | X = [20, 21, 22, 23, 24, 25] Y = [23, 21, 26, 22, 25, 24] Y_BAR = [22.54, 22.91, 23.28, 23.65, 24.02, 24.39] # Core Python from math import sqrt n = len(X) # Use length of either X or Y to get number of elements s = 0 for i in range(0,n): s += (Y[i] - Y_BAR[i])**2 RMSE = sqrt(s/n) print (&quot;RMSE using Python: %&quot;, RMSE) # Using Scikit-Learn Library from sklearn.metrics import mean_squared_error RMSE_sci = sqrt(mean_squared_error(Y, Y_BAR)) print (&quot;RMSE using Sklearn: % &quot;, RMSE_sci) # Using Numpy import numpy as np RMSE_numpy = np.sqrt(np.mean(np.square(np.subtract(Y,Y_BAR)))) print (&quot;RMSE using Numpy: % &quot;, RMSE_numpy) . RMSE using Python: % 1.5860380407375685 RMSE using Sklearn: % 1.5860380407375685 RMSE using Numpy: % 1.5860380407375685 . RAE (Relative Absolute Error) :- . $$RAE = frac{ sum_{i=1}^{n} left | y_{i} - hat y_{i} right |}{ sum_{i=1}^{n} left | y_{i} - bar y right |}$$ . where y = actual value in the data set ; $ hat y$ = value computed by solving the regression equation ; $ bar y$ is mean value of y . Calculate the difference between Y and $ hat Y$ for each row, take absolute value and sum it all | Calculate the mean of Y denoted by $ bar Y$ | Calculate the difference between Y and $ bar Y$ for each row, take absolute value and sum it all | Divide value obtained in step1 by step3 | X = [20, 21, 22, 23, 24, 25] Y = [23, 21, 26, 22, 25, 24] Y_BAR = [22.54, 22.91, 23.28, 23.65, 24.02, 24.39] # Using Numpy import numpy as np RAE_numpy = np.sum(np.abs(np.subtract(Y,Y_BAR))) / np.sum(np.abs(np.subtract(Y, np.mean(Y)))) print (&quot;RAE using Numpy: % &quot;, RAE_numpy) . RAE using Numpy: % 0.9011111111111111 . RSE (Relative Squared Error) :- . $$RSE = frac{ sum_{i=1}^{n} left ( y_{i} - hat y_{i} right )^2}{ sum_{i=1}^{n} left ( y_{i} - bar y right )^2}$$ . where y = actual value in the data set ; $ hat y$ = value computed by solving the regression equation ; $ bar y$ is mean value of y . Calculate the difference between Y and $ hat Y$ for each row, square it and sum it all | Calculate the mean of Y denoted by $ bar Y$ | Calculate the difference between Y and $ bar Y$ for each row, square it and sum it all | Divide value obtained in step1 by step3 | X = [20, 21, 22, 23, 24, 25] Y = [23, 21, 26, 22, 25, 24] Y_BAR = [22.54, 22.91, 23.28, 23.65, 24.02, 24.39] # Using Numpy import numpy as np RSE_numpy = np.sum(np.square(np.subtract(Y,Y_BAR))) / np.sum(np.square(np.subtract(Y, np.mean(Y)))) print (&quot;RSE using Numpy: % &quot;, RSE_numpy) . RSE using Numpy: % 0.8624628571428568 .",
            "url": "https://mlblog.singhsarbjit.com/machine_learning/2020/05/30/model_evaluation_metrics.html",
            "relUrl": "/machine_learning/2020/05/30/model_evaluation_metrics.html",
            "date": " • May 30, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Numpy Tutorial",
            "content": "Need for Numpy : . If we have two lists and simply want to add the elements, we would have to iterate over each element of both lists and add them. Just using &quot;+&quot; operator will concatenate the lists. . a = [1, 2, 3, 4] b = [5, 6, 7, 8] print (a+b) . [1, 2, 3, 4, 5, 6, 7, 8] . r = [] for x,y in zip(a,b): r.append(x+y) print (r) . [6, 8, 10, 12] . Numpy : . import numpy as np . # Array Creation #New Arrays can be created by using array function. #This function takes list as an argument and create N-Dimensional array based on the arguments. # One Dimensional Array ar1 = np.array([1,2,3]) # Two Dimensional Array ar2 = np.array([[1,2,3], [4,5,6]]) # Other methods to create new Arrays # There are several other ways to create Arrays :- # arange([start], [stop], [step]) # This is similar to Python range function and creates evenly spaced arrays. np.arange(5) # OUT : array([0, 1, 2, 3, 4]) np.arange(2,10,2) # Excludes the stop position element # OUT : array([2, 4, 6, 8]) # linspace([start], [stop], [num]) # Creates array by number of points. np.linspace(0,6,3) # Creates 3 evenly spaced elements between start and stop point. # Note, stop point value is included. # OUT : array([0., 3., 6.]) np.linspace(0,6,3,endpoint=False) # Excludes the stop position element #OUT : array([0., 2., 4.]) . array([0., 2., 4.]) . # Type of array a = np.array([1, 2, 3, 4, 5]) type(a) . numpy.ndarray . # Data-type : Every element inside this array will be of this type a.dtype . dtype(&#39;int64&#39;) . # Another array with floating members f = np.array([1.2, 33.5, 6.4, 7.8, 8.6]) f.dtype . dtype(&#39;float64&#39;) . a[0] = 10 a . array([10, 2, 3, 4, 5]) . # Decimal portion will be truncated because all elements has to be of same type a[0] = 6.88 a . array([6, 2, 3, 4, 5]) . # Number of dimension a.ndim . 1 . # Returns a tuple showing number of elements across each dimension a.shape . (5,) . # Total number of elements a.size . 5 . # Bytes per element print(a.itemsize) print(f.itemsize) . 8 8 . # Bytes used by data portion of array a.nbytes . 40 . # Multi-Dimensional Arrays # A 2-D array is basically a list of list # A 3-D array will be a list of list of list a = np.array([[1, 2, 3, 4], [5, 6, 7, 8]]) print(&quot;Array is : n&quot;,a) print(&quot; n&quot;) print(&quot;Size is : &quot;,a.size) print(&quot;Dimension is : &quot;,a.ndim) print(&quot;Shape is : &quot;,a.shape) # NOTE : # Dimension 0 is row, dimension 1 is column. So, in this case, we have a tuple (2,4) indicating 2 rows and # 4 elements in each row . Array is : [[1 2 3 4] [5 6 7 8]] Size is : 8 Dimension is : 2 Shape is : (2, 4) . Following picture illustartes the dimension/axis for multi-dimensional array :- . . Source : http://physics.cornell.edu/ . # Retrieving/Setting individual element from a 2-D array :- # Syntax : Array[row,column] print(&quot;Element in first row and fourth column is &quot;,a[0,3]) print(&quot;Element in second row and first column is &quot;,a[1,0]) # Retrieving all elements of a row :- # If you specify only first parameter (row index), then all elements of that row are returned print(&quot;Elements in second row&quot;, a[1]) # Setting an element a[1,0] = 10 print(&quot;Array after changing first element of second row : n&quot;, a) a[1] = [10, 11 ,12 ,13] print(&quot;Array after changing second row : n&quot;, a) . Element in first row and fourth column is 4 Element in second row and first column is 5 Elements in second row [5 6 7 8] Array after changing first element of second row : [[ 1 2 3 4] [10 6 7 8]] Array after changing second row : [[ 1 2 3 4] [10 11 12 13]] . Array Slicing :- . An array is sliced with the following syntax, which extracts the sequence based on lower and upper bound . Array[start:stop:step] . Note, that the lower (start) bound element is included but the upper(stop) bound element is not included. Step value defines the stride. . Just like Python lists, the array is represented with indices from both directions. Sequence can be extracted with the above syntax and combinations of positive/negative indices. . NOTE : If boundaries are ommited, it is considered as starting (or ending) of a list. . a = np.array([10, 11, 12, 13, 14, 15]) &quot;&quot;&quot; +++++++ | 10| 11| 12| 13| 14| 15| +++++++ 0 1 2 3 4 5 -6 -5 -4 -3 -2 -1 &quot;&quot;&quot; # Extract the second, third and fourth element print(&quot;Second, third and fourth element : a[1:4] :-&quot;, a[1:4]) print(&quot; nSame elements can be extracted with following notations as well ...&quot;) print(&quot;a[-5:-2] :- &quot;, a[-5:-2]) print(&quot;a[-5:4] :- &quot;, a[-5:4]) print(&quot;a[1:-2] :- &quot;, a[1:-2]) # Extract first three elements print(&quot; nExtract first three elements ...&quot;) print(&quot;a[:3] :- &quot;, a[:3]) # Extract last three elements print(&quot; nExtract last three elements ...&quot;) print(&quot;a[-3:] :- &quot;, a[-3:]) print(&quot;a[3:] :- &quot;, a[3:]) # Extract every other element print(&quot; nExtract every other element ...&quot;) print(&quot;a[::2] :- &quot;, a[::2]) . Second, third and fourth element : a[1:4] :- [11 12 13] Same elements can be extracted with following notations as well ... a[-5:-2] :- [11 12 13] a[-5:4] :- [11 12 13] a[1:-2] :- [11 12 13] Extract first three elements ... a[:3] :- [10 11 12] Extract last three elements ... a[-3:] :- [13 14 15] a[3:] :- [13 14 15] Extract every other element ... a[::2] :- [10 12 14] . # Inserting values a[2:] = [2, 3, 4, 5] print(a) . [10 11 2 3 4 5] . # More on slicing with an example using 2-D data a = np.arange(25).reshape(5,5) print(&quot;Original Array&quot;) print(a) print(&quot; n&quot;) print(a[4]) print(&quot; n&quot;) print(a[:,1::2]) print(&quot; n&quot;) print(a[1::2,:3:2]) . Original Array [[ 0 1 2 3 4] [ 5 6 7 8 9] [10 11 12 13 14] [15 16 17 18 19] [20 21 22 23 24]] [20 21 22 23 24] [[ 1 3] [ 6 8] [11 13] [16 18] [21 23]] [[ 5 7] [15 17]] . a = np.array([1, 2, 3, 4, 5]) b = a[:3] b[0] = -1 print(a) . [-1 2 3 4 5] . c = a.copy() . Fancy Indexing :- . To understand this better, let&#39;s s . # Fancy Indexing - Index Based : (1-D) # To understand this better, let&#39;s say we have an array (1-D for simplicity) with some random numbers a = np.random.randint(1, 100, 15) # Will create an array of 15 elements between 1 &amp; 100 print (a) # Now, say we need to extract the element(s) at index 1, 5 and 13. One way is to extract each item individually print(&quot;Element at index {} is {}&quot;.format(1, a[1])) print(&quot;Element at index {} is {}&quot;.format(5, a[5])) print(&quot;Element at index {} is {}&quot;.format(13, a[13])) # However, Numpy offers another approach where we could just a pass of list of indexes for which we want to # retrieve elements index = [1, 5, 13] print(&quot;Elements at indexes {} are {}&quot;.format(index, a[index])) . [71 21 92 4 88 21 11 72 43 33 62 17 73 32 34] Element at index 1 is 21 Element at index 5 is 21 Element at index 13 is 32 Elements at indexes [1, 5, 13] are [21 21 32] . # Fancy Indexing - Boolean Array Indexing (1-D) # Consider we have an array of odd and even numbers. # Our task is to find out even elements a = np.array([1, 3, 4, 5, 6, 8, 10, 3, 1]) # Numpy allows elements to be retrieved by a boolean array i.e. elements will be returned for True element mask = (a % 2 == 0) print(&quot;Original array is {}&quot;.format(a)) print(&quot;Mask array is {}&quot;.format(mask)) print(&quot;Even numbers are &quot;) print(a[mask]) . Original array is [ 1 3 4 5 6 8 10 3 1] Mask array is [False False True False True True True False False] Even numbers are [ 4 6 8 10] . # Fancy Indexing - Index Based : (2-D) # Fancy indexing can also be performed on a 2-D array a = np.arange(25).reshape(5,5) # If we have a 2-D array, passing a single index will return the entire row print(&quot;Original array is n {}&quot;.format(a)) print(&quot; n&quot;) print(&quot;Contents at index (or row) {} is {}&quot;.format(3,a[3])) print(&quot;Contents at index (or row) {} is {}&quot;.format(2,a[2])) . Original array is [[ 0 1 2 3 4] [ 5 6 7 8 9] [10 11 12 13 14] [15 16 17 18 19] [20 21 22 23 24]] Contents at index (or row) 3 is [15 16 17 18 19] Contents at index (or row) 2 is [10 11 12 13 14] . # If we pass multiple indexes (as a list), we get the data for these entire rows print(&quot;a[3,2] : This will print the element at 3rd row and 2nd column :&quot;) print(a[3,2]) print(&quot; n&quot;) print(&quot;a[[3,2]] : This will print the contents for 3rd and 2nd row :&quot;) print(a[[3,2]]) print(&quot; n&quot;) print(&quot;a[[0,2,4],[0,3,0]] : This will print elements at (0,0), (2,3) &amp; (4,0) :&quot;) print(a[[0,2,4],[0,3,0]]) print(&quot; n&quot;) print(&quot;a[[0,2,4]][:] : This will print all elements at row 0, 2 &amp; 4 :&quot;) print(a[[0,2,4]][:]) print(a[[0,2,4]]) print(&quot; n&quot;) print(&quot;a[[0,2,4]][:,[0,1,3]] : This will print elements at row 0, 2 &amp; 4 AND columns 0, 1 &amp; 3 :&quot;) print(a[[0,2,4]][:,[0,1,3]]) . a[3,2] : This will print the element at 3rd row and 2nd column : 17 a[[3,2]] : This will print the contents for 3rd and 2nd row : [[15 16 17 18 19] [10 11 12 13 14]] a[[0,2,4],[0,3,0]] : This will print elements at (0,0), (2,3) &amp; (4,0) : [ 0 13 20] a[[0,2,4]][:] : This will print all elements at row 0, 2 &amp; 4 : [[ 0 1 2 3 4] [10 11 12 13 14] [20 21 22 23 24]] [[ 0 1 2 3 4] [10 11 12 13 14] [20 21 22 23 24]] a[[0,2,4]][:,[0,1,3]] : This will print elements at row 0, 2 &amp; 4 AND columns 0, 1 &amp; 3 : [[ 0 1 3] [10 11 13] [20 21 23]] . print(a) . [[ 0 1 2 3 4] [ 5 6 7 8 9] [10 11 12 13 14] [15 16 17 18 19] [20 21 22 23 24]] . # Boolean Array Indexing (2-D) # Boolean Array indexing will work similar to 1-D. Let&#39;s use the similar example to find all odd elements mask = (a % 2 != 0) print(&quot;Original array is n {} n&quot;.format(a)) print(&quot;Mask array is n {} n&quot;.format(mask)) print(&quot;Odd numbers are &quot;) print(a[mask]) . Original array is [[ 0 1 2 3 4] [ 5 6 7 8 9] [10 11 12 13 14] [15 16 17 18 19] [20 21 22 23 24]] Mask array is [[False True False True False] [ True False True False True] [False True False True False] [ True False True False True] [False True False True False]] Odd numbers are [ 1 3 5 7 9 11 13 15 17 19 21 23] . Vectorization : . In high-level languages the term vectorization refers to use of pre-compiled, optimized code written in language like C to perform mathematical operations over sequence of data. Basically, this is done without writing &quot;for&quot; loop in Python. . Python native list allows elements to be of different data types as opposed to Numpy array where the elements have to be of same data type. This property allows mathematical operations to be delecated to pre-compiled code written in C to gain performance improvements. . a = np.arange(16).reshape(4,4) b = np.arange(16).reshape(4,4) print(&quot;Array a is n&quot;,a,&quot; n n&quot;,&quot;Array b is n&quot;,b, &quot; n&quot;) # Element wise operation print(&quot;a + 2 : Adding 2 to each element :- &quot;,&quot; n&quot;,a+2, &quot; n&quot;) print(&quot;a - 2 : Subtracting 2 from each element :- &quot;,&quot; n&quot;,a-2, &quot; n&quot;) print(&quot;a / 2 : Dividing 2 from each element :- &quot;,&quot; n&quot;,a/2, &quot; n&quot;) print(&quot;a * 2 : Multiplying 2 from each element :- &quot;,&quot; n&quot;,a*2, &quot; n&quot;) . Array a is [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15]] Array b is [[ 0 1 2 3] [ 4 5 6 7] [ 8 9 10 11] [12 13 14 15]] a + 2 : Adding 2 to each element :- [[ 2 3 4 5] [ 6 7 8 9] [10 11 12 13] [14 15 16 17]] a - 2 : Subtracting 2 from each element :- [[-2 -1 0 1] [ 2 3 4 5] [ 6 7 8 9] [10 11 12 13]] a / 2 : Dividing 2 from each element :- [[0. 0.5 1. 1.5] [2. 2.5 3. 3.5] [4. 4.5 5. 5.5] [6. 6.5 7. 7.5]] a * 2 : Multiplying 2 from each element :- [[ 0 2 4 6] [ 8 10 12 14] [16 18 20 22] [24 26 28 30]] . # Array based operations :- print(&quot;a + b : Adding each element of array &#39;a&#39; to element of &#39;b&#39; :- &quot;,&quot; n&quot;,a+b, &quot; n&quot;) print(&quot;a - b : Subtracting each element of array &#39;a&#39; to element of &#39;b&#39; :- &quot;,&quot; n&quot;,a-b, &quot; n&quot;) print(&quot;a * b : Multiplying each element of array &#39;a&#39; to element of &#39;b&#39; :- &quot;,&quot; n&quot;,a*b, &quot; n&quot;) . a + b : Adding each element of array &#39;a&#39; to element of &#39;b&#39; :- [[ 0 2 4 6] [ 8 10 12 14] [16 18 20 22] [24 26 28 30]] a - b : Subtracting each element of array &#39;a&#39; to element of &#39;b&#39; :- [[0 0 0 0] [0 0 0 0] [0 0 0 0] [0 0 0 0]] a * b : Multiplying each element of array &#39;a&#39; to element of &#39;b&#39; :- [[ 0 1 4 9] [ 16 25 36 49] [ 64 81 100 121] [144 169 196 225]] . # Sequence based operations # These functions are called usoc or universal functions which operate on each element print(np.sum(a)) # Add each element in array print(np.sum(a,axis=0)) # Add each element across axis-0 (rows) - vertical direction print(np.sum(a,axis=1)) # Add each element across axis-1 (columns) . 120 [24 28 32 36] [ 6 22 38 54] . Broadcasting :- . When we perform arithemetic operations on two arrays, the operations are performed element wise. One condition to perform such operations is that the arrays should be of same shape. . Broadcasting is a technique used by Numpy to perform operations on arrays of different shapes. . Subject to certain constraints, the smaller array is “broadcast” across the larger array so that they have compatible shapes. Broadcasting provides a means of vectorizing array operations so that looping occurs in C instead of Python. It does this without making needless copies of data and usually leads to efficient algorithm implementations. [From Numpy.org] . a = np.array([1, 2, 3]) b = np.array([2, 2, 2]) print(a+b) . [3 4 5] . Example 1 :- . In the below example, we are performing operations between an array and scalar. Scalar can be considered as another array (dimensionless). If you look at the results, they are identical to the example above (where b is an 1*3 array with 2 as an element). . In this case, the smaller array (scalar) is broadcasted across the larger array i.e. the smaller array is duplicated to match the dimensions and size of larger array. . (Image Source : Numpy.org) . a = np.array([1, 2, 3]) b = 2 print(a+b) . [3 4 5] . Example 2 :- . In this example, a 1-D array is added to a 2-D array. . (Image Source : Numpy.org) . a = np.array([[0, 0, 0], [10, 10, 10], [20, 20, 20], [30, 30, 30]]) b = np.array([[0, 1, 2]]) print(a+b) . [[ 0 1 2] [10 11 12] [20 21 22] [30 31 32]] . Broadcasting Rules :- . Rule 1: If the two arrays differ in their number of dimensions, the shape of the one with fewer dimensions is padded with ones on its leading (left) side. . Rule 2: If the shape of the two arrays does not match in any dimension, the array with shape equal to 1 in that dimension is stretched to match the other shape. . Rule 3: If in any dimension the sizes disagree and neither is equal to 1, an error is raised. . # Example 1 a = np.ones((2,4)) b = np.arange(4) print(&quot;Array a is :-&quot;) print(a) print(&quot; nArray b is :-&quot;) print(b) print(&quot; nShape of array a is :-&quot;) print(a.shape) # =&gt; (2,4) print(&quot; nShape of array b is :-&quot;) print(b.shape) # =&gt; (4,) # Apply rule 1 on the array with fewer dimensions i.e. pad with ones on left side # a.shape =&gt; (2,4) # b.shape =&gt; (1,4) # Apply rule 2 : Stretch the dimension for array b accross dimension with 1&#39;s # a.shape =&gt; (2,4) # b.shape =&gt; (2,4) # Apply rule 3 : Dimensions matches print(&quot; n a+b is :-&quot;) print(a+b) # View broadcasted arrays x, y = np.broadcast_arrays(a, b) print(&quot; nArray a after broadcasting is (before addition) :-&quot;) print(x) print(&quot; nArray b after broadcasting is (before addition) :-&quot;) print(y) . Array a is :- [[1. 1. 1. 1.] [1. 1. 1. 1.]] Array b is :- [0 1 2 3] Shape of array a is :- (2, 4) Shape of array b is :- (4,) a+b is :- [[1. 2. 3. 4.] [1. 2. 3. 4.]] Array a after broadcasting is (before addition) :- [[1. 1. 1. 1.] [1. 1. 1. 1.]] Array b after broadcasting is (before addition) :- [[0 1 2 3] [0 1 2 3]] . # Example 2 a = np.arange(4).reshape(4,1) b = np.arange(4) print(&quot;Array a is :-&quot;) print(a) print(&quot; nArray b is :-&quot;) print(b) print(&quot; nShape of array a is :-&quot;) print(a.shape) # =&gt; (4,1) print(&quot; nShape of array b is :-&quot;) print(b.shape) # =&gt; (4,) # Apply rule 1 on the array with fewer dimensions i.e. pad with ones on left side # a.shape =&gt; (4,1) # b.shape =&gt; (1,4) # Apply rule 2 : Stretch the dimension for array b accross dimension with 1&#39;s # a.shape =&gt; (4,4) # b.shape =&gt; (4,4) # Apply rule 3 : Dimensions matches print(&quot; n a+b is :-&quot;) print(a+b) # View broadcasted arrays x, y = np.broadcast_arrays(a, b) print(&quot; nArray a after broadcasting is (before addition) :-&quot;) print(x) print(&quot; nArray b after broadcasting is (before addition) :-&quot;) print(y) . Array a is :- [[0] [1] [2] [3]] Array b is :- [0 1 2 3] Shape of array a is :- (4, 1) Shape of array b is :- (4,) a+b is :- [[0 1 2 3] [1 2 3 4] [2 3 4 5] [3 4 5 6]] Array a after broadcasting is (before addition) :- [[0 0 0 0] [1 1 1 1] [2 2 2 2] [3 3 3 3]] Array b after broadcasting is (before addition) :- [[0 1 2 3] [0 1 2 3] [0 1 2 3] [0 1 2 3]] . # Example 3 a = np.ones((4,3)) b = np.arange(4) print(&quot;Array a is :-&quot;) print(a) print(&quot; nArray b is :-&quot;) print(b) print(&quot; nShape of array a is :-&quot;) print(a.shape) # =&gt; (4,3) print(&quot; nShape of array b is :-&quot;) print(b.shape) # =&gt; (4,) # Apply rule 1 on the array with fewer dimensions i.e. pad with ones on left side # a.shape =&gt; (4,3) # b.shape =&gt; (1,4) # Apply rule 2 : Stretch the dimension for array b accross dimension with 1&#39;s # a.shape =&gt; (4,3) # b.shape =&gt; (4,4) # Apply rule 3 : Dimensions DOES NOT matches print(&quot; n a+b is :-&quot;) #print(a+b) # View broadcasted arrays try: x, y = np.broadcast_arrays(a, b) print(&quot; nArray a after broadcasting is (before addition) :-&quot;) print(x) print(&quot; nArray b after broadcasting is (before addition) :-&quot;) print(y) except Exception as e: print(e) . Array a is :- [[1. 1. 1.] [1. 1. 1.] [1. 1. 1.] [1. 1. 1.]] Array b is :- [0 1 2 3] Shape of array a is :- (4, 3) Shape of array b is :- (4,) a+b is :- shape mismatch: objects cannot be broadcast to a single shape . Shape Operations . reshape(array, newshape) . Takes an array as an argument with newshape (integer or tuple). The newshape should be compatible with existing shape. . ravel(array) . Takes an array as an argument and returns a flattened contiguous array (1-D). . a = np.arange(6).reshape((2,3)) print(a) b = np.ravel(x) print(b) . [[0 1 2] [3 4 5]] [0 0 0 0 1 1 1 1 2 2 2 2 3 3 3 3] .",
            "url": "https://mlblog.singhsarbjit.com/tutorials/2020/05/15/numpy_tutorial.html",
            "relUrl": "/tutorials/2020/05/15/numpy_tutorial.html",
            "date": " • May 15, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Linear Regression",
            "content": "Linear Regression is one of the common and popular algorithm in Machine Learning. Infact, typically this would be the first algorithm that you will encounter while learning Machine Learning. . Linear regression as the name suggests is a model that assumes a linear relationship between independent variable (x) and the dependent or target variable (y). There are two types on Linear Regression Model :- . Simple Linear Regression : Linear model between one independent variable (x) and target variable (y). . Multiple Linear Regression : Linear model between two or more independent variables (x1, x2 ...) and target variable (y). . Linear regression model would predict the output (dependent variable) as a function of independent variable. . Y = a + b X . where, Y : Predictor Variable X : Independent Variable a : Intercept of regression line (i.e. value of Y when X=0) b : Slope of regression line (i.e. rate of change of Y when X is incremented by 1 unit) . For Multiple Linear Regression, equation would be . Y = a + b1X1 + b2X2 + b3X3 + ...... . Let&#39;s start with Linear Regression using Python. For this tutorial, I&#39;ll be using Boston Housing Price Data Set, which is provided in SciKit Learn library SciKit Link. Details about this data set can be found at Link . First import all the required libraries. . import numpy as np import pandas as pd import matplotlib.pyplot as plt import seaborn as sns from scipy import stats from sklearn.datasets import load_boston . We will load the dataset using load_boston method, this will return a Bunch object. Bunch object is like a Python dictionary, let&#39;s quickly look at the significance of keys :- . data &emsp;: &emsp; Data to learn target &emsp;: &emsp; Target column, for this example Median value of owner occupied home will be the target DESCR &emsp;: &emsp; Description of dataset including the headers significance feature_names &emsp;: &emsp; Names of header filename &emsp;: &emsp; Physical location from where the data was created . boston = load_boston() . Quick Analysis of Data Set . print(&quot;Shape for Data is&quot;, boston.data.shape) print(&quot;Shape for Target is&quot;, boston.target.shape) print(&quot;Names of header : n&quot;, boston.feature_names) print(&quot;Dataset description : n&quot;, boston.DESCR) . Shape for Data is (506, 13) Shape for Target is (506,) Names of header : [&#39;CRIM&#39; &#39;ZN&#39; &#39;INDUS&#39; &#39;CHAS&#39; &#39;NOX&#39; &#39;RM&#39; &#39;AGE&#39; &#39;DIS&#39; &#39;RAD&#39; &#39;TAX&#39; &#39;PTRATIO&#39; &#39;B&#39; &#39;LSTAT&#39;] Dataset description : .. _boston_dataset: Boston house prices dataset **Data Set Characteristics:** :Number of Instances: 506 :Number of Attributes: 13 numeric/categorical predictive. Median Value (attribute 14) is usually the target. :Attribute Information (in order): - CRIM per capita crime rate by town - ZN proportion of residential land zoned for lots over 25,000 sq.ft. - INDUS proportion of non-retail business acres per town - CHAS Charles River dummy variable (= 1 if tract bounds river; 0 otherwise) - NOX nitric oxides concentration (parts per 10 million) - RM average number of rooms per dwelling - AGE proportion of owner-occupied units built prior to 1940 - DIS weighted distances to five Boston employment centres - RAD index of accessibility to radial highways - TAX full-value property-tax rate per $10,000 - PTRATIO pupil-teacher ratio by town - B 1000(Bk - 0.63)^2 where Bk is the proportion of blacks by town - LSTAT % lower status of the population - MEDV Median value of owner-occupied homes in $1000&#39;s :Missing Attribute Values: None :Creator: Harrison, D. and Rubinfeld, D.L. This is a copy of UCI ML housing dataset. https://archive.ics.uci.edu/ml/machine-learning-databases/housing/ This dataset was taken from the StatLib library which is maintained at Carnegie Mellon University. The Boston house-price data of Harrison, D. and Rubinfeld, D.L. &#39;Hedonic prices and the demand for clean air&#39;, J. Environ. Economics &amp; Management, vol.5, 81-102, 1978. Used in Belsley, Kuh &amp; Welsch, &#39;Regression diagnostics ...&#39;, Wiley, 1980. N.B. Various transformations are used in the table on pages 244-261 of the latter. The Boston house-price data has been used in many machine learning papers that address regression problems. .. topic:: References - Belsley, Kuh &amp; Welsch, &#39;Regression diagnostics: Identifying Influential Data and Sources of Collinearity&#39;, Wiley, 1980. 244-261. - Quinlan,R. (1993). Combining Instance-Based and Model-Based Learning. In Proceedings on the Tenth International Conference of Machine Learning, 236-243, University of Massachusetts, Amherst. Morgan Kaufmann. . # Create a Pandas Data Frame from this data set df = pd.DataFrame(boston.data) df.head(2) . 0 1 2 3 4 5 6 7 8 9 10 11 12 . 0 0.00632 | 18.0 | 2.31 | 0.0 | 0.538 | 6.575 | 65.2 | 4.0900 | 1.0 | 296.0 | 15.3 | 396.9 | 4.98 | . 1 0.02731 | 0.0 | 7.07 | 0.0 | 0.469 | 6.421 | 78.9 | 4.9671 | 2.0 | 242.0 | 17.8 | 396.9 | 9.14 | . As you can see that the data frame has no header names and is also missing our target column. Let&#39;s fix this first :- . df.columns = boston.feature_names df[&#39;MEDV&#39;] = boston.target df.head(2) . CRIM ZN INDUS CHAS NOX RM AGE DIS RAD TAX PTRATIO B LSTAT MEDV . 0 0.00632 | 18.0 | 2.31 | 0.0 | 0.538 | 6.575 | 65.2 | 4.0900 | 1.0 | 296.0 | 15.3 | 396.9 | 4.98 | 24.0 | . 1 0.02731 | 0.0 | 7.07 | 0.0 | 0.469 | 6.421 | 78.9 | 4.9671 | 2.0 | 242.0 | 17.8 | 396.9 | 9.14 | 21.6 | . df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 506 entries, 0 to 505 Data columns (total 14 columns): CRIM 506 non-null float64 ZN 506 non-null float64 INDUS 506 non-null float64 CHAS 506 non-null float64 NOX 506 non-null float64 RM 506 non-null float64 AGE 506 non-null float64 DIS 506 non-null float64 RAD 506 non-null float64 TAX 506 non-null float64 PTRATIO 506 non-null float64 B 506 non-null float64 LSTAT 506 non-null float64 MEDV 506 non-null float64 dtypes: float64(14) memory usage: 55.4 KB . Data Wrangling . If we check our data, it doesn&#39;t seems to have any missing value. So, we will assume this as cleaned data and will use as such. . df.isnull().sum() . CRIM 0 ZN 0 INDUS 0 CHAS 0 NOX 0 RM 0 AGE 0 DIS 0 RAD 0 TAX 0 PTRATIO 0 B 0 LSTAT 0 MEDV 0 dtype: int64 . Exploratory Data Analysis . # Descriptive Statistics df.describe() . CRIM ZN INDUS CHAS NOX RM AGE DIS RAD TAX PTRATIO B LSTAT MEDV . count 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | 506.000000 | . mean 3.613524 | 11.363636 | 11.136779 | 0.069170 | 0.554695 | 6.284634 | 68.574901 | 3.795043 | 9.549407 | 408.237154 | 18.455534 | 356.674032 | 12.653063 | 22.532806 | . std 8.601545 | 23.322453 | 6.860353 | 0.253994 | 0.115878 | 0.702617 | 28.148861 | 2.105710 | 8.707259 | 168.537116 | 2.164946 | 91.294864 | 7.141062 | 9.197104 | . min 0.006320 | 0.000000 | 0.460000 | 0.000000 | 0.385000 | 3.561000 | 2.900000 | 1.129600 | 1.000000 | 187.000000 | 12.600000 | 0.320000 | 1.730000 | 5.000000 | . 25% 0.082045 | 0.000000 | 5.190000 | 0.000000 | 0.449000 | 5.885500 | 45.025000 | 2.100175 | 4.000000 | 279.000000 | 17.400000 | 375.377500 | 6.950000 | 17.025000 | . 50% 0.256510 | 0.000000 | 9.690000 | 0.000000 | 0.538000 | 6.208500 | 77.500000 | 3.207450 | 5.000000 | 330.000000 | 19.050000 | 391.440000 | 11.360000 | 21.200000 | . 75% 3.677083 | 12.500000 | 18.100000 | 0.000000 | 0.624000 | 6.623500 | 94.075000 | 5.188425 | 24.000000 | 666.000000 | 20.200000 | 396.225000 | 16.955000 | 25.000000 | . max 88.976200 | 100.000000 | 27.740000 | 1.000000 | 0.871000 | 8.780000 | 100.000000 | 12.126500 | 24.000000 | 711.000000 | 22.000000 | 396.900000 | 37.970000 | 50.000000 | . Let&#39;s use some visualization techniques on our data to understand the distribution and relationship of independent variables with our target variable. . For distribution of data, we will use Histogram. Before proceeding, let&#39;s look at what Histogram is :- . A histogram is a type of bar graph that shows the frequency or number of values compared to a set of value ranges. To construct a histogram, the first step is to “bin” the range of values — that is, divide the entire range of values into a series of intervals — and then count how many values fall into each interval. The bins are usually specified as consecutive, non-overlapping intervals of a variable. The bins (intervals) must be adjacent, and are often (but are not required to be) of equal size. . Let&#39;s use histogram to view the data distribution in our case. Look closely at our target (MEDV) and notice that the prices are mainly in the mid range distribution. . df.hist(bins=30, figsize=(18,18)) . array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1cfa5320&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d240780&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d268be0&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d29a198&gt;], [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d2bf710&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d2e7ba8&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d316160&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d33c710&gt;], [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d33c748&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d394208&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d3ba780&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d3e1cf8&gt;], [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d4102b0&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d437828&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d45eda0&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a1d48e358&gt;]], dtype=object) . To visualize the relationship between independent variables and target variable (MEDV), we will use Regression Plot, which is basically a Scatter Plot with fitted regression line. We use regression plot for variables with continous values, while a box plot will be used for categorical variables. . plt.figure(figsize=(25, 25)) for i, col in enumerate(boston.feature_names): plt.subplot(4, 4 , i+1) sns.regplot(x=col, y=&#39;MEDV&#39;, data=df) plt.title(&quot;%s vs MEDV&quot; %(col)) . Observations so far :- . Variable &#39;RM&#39; seems to have positive linear relationship with target variable &#39;MEDV&#39;. | Variable &#39;LSTAT&#39; seems to have negative linear relationship with target variable &#39;MEDV&#39;. | . Let&#39;s use other statistical methods to confirm our observations. We will use Pearson Corelation as our statistical tool. . What is Pearson Corelation? . A Pearson Corelation is a number between -1 and 1 which indicates the extent to which two variables are linearly related. . Corelation Cofficient: . 1 - Positively correlated -1 - Negatively correlated. 0 - Not correlated. . P-value: . The P-value is the probability value that the correlation between these two variables is statistically significant. . By convention, when the . p-value is &lt; 0.001: we say there is strong evidence that the correlation is significant. the p-value is &lt; 0.05: there is moderate evidence that the correlation is significant. the p-value is &lt; 0.1: there is weak evidence that the correlation is significant. the p-value is &gt; 0.1: there is no evidence that the correlation is significant. . We will use the Pandas data frame method &quot;corr()&quot; to find the co-relation and then use the Seaborn&#39;s Heatmap to plot it. . sns.set(rc={&#39;figure.figsize&#39;:(8,8)}) sns.heatmap(df.corr().round(2), square=True, cmap=&#39;RdYlGn&#39;, annot=True) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1a203d7b70&gt; . We observed visually that attributes &#39;RM&#39; exhibits postive linear relationship, which seems correct as per Corelation Cofficient with a value of 0.7. We also observed that &#39;LSTAT&#39; exhibits negative linear relationship with &#39;MEDV&#39; and this seems to be correct statistically as well with a cofficient value of -0.74. . Let&#39;s also look at the p-value as well. . pearson_coef1, p_value1 = stats.pearsonr(df[&#39;RM&#39;], df[&#39;MEDV&#39;]) print(&quot;The Pearson Correlation Coefficient for RM is&quot;, pearson_coef1, &quot; with a P-value of P = &quot;, p_value1) pearson_coef2, p_value2 = stats.pearsonr(df[&#39;LSTAT&#39;], df[&#39;MEDV&#39;]) print(&quot;The Pearson Correlation Coefficient for LSTAT is&quot;, pearson_coef2, &quot; with a P-value of P = &quot;, p_value2) print(&quot;Is there strong evidence if corelation is signifcant for RM :- &quot;, p_value1 &lt; 0.001) print(&quot;Is there strong evidence if corelation is signifcant for LSTAT :- &quot;, p_value2 &lt; 0.001) . The Pearson Correlation Coefficient for RM is 0.6953599470715393 with a P-value of P = 2.487228871008295e-74 The Pearson Correlation Coefficient for LSTAT is -0.7376627261740147 with a P-value of P = 5.081103394389002e-88 Is there strong evidence if corelation is signifcant for RM :- True Is there strong evidence if corelation is signifcant for LSTAT :- True . As you can notice, our corelation is significant for variables &#39;RM&#39; and &#39;LSTAT&#39;. . Linear Model Creation . Now that we have indentified few variables which appears to have linear relationship with our target data, we will start developing the Linear Regression Model. . We will start with Simple Linear Regression. As stated above, Simple Linear Regression only uses one variable, so we will use only &#39;RM&#39; attribute. . First, we will import the LinearRegression class from the SciKit library and create a LinearRegression object. Then we will train the model, find the slope and intercept and finally we will do some prediction. . NOTE : For this post as part of explaining linear regression model, I will be using the entire data set for training. In real world, we will split the data into test and training data. This will be covered in a later post. . from sklearn.linear_model import LinearRegression # Create Linear Regression Object lm1 = LinearRegression() X1 = df[[&#39;RM&#39;]] Y1 = df[[&#39;MEDV&#39;]] # Target # Fit (Train) the model lm1.fit(X1,Y1) print(&quot;Intercept for the model is&quot;, lm1.intercept_, &quot;and the scope is&quot;,lm1.coef_) # Prediction Yout1 = lm1.predict(X1) # Actual and Predicted values (first five) print(&quot;Predicted Values:&quot;,Yout1[0:5]) print(&quot;Actual Values:&quot;,Y1.values[0:5]) . Intercept for the model is [-34.67062078] and the scope is [[9.10210898]] Predicted Values: [[25.17574577] [23.77402099] [30.72803225] [29.02593787] [30.38215211]] Actual Values: [[24. ] [21.6] [34.7] [33.4] [36.2]] . Now, we will develop the Multiple Linear Regression with two variables - &#39;RM&#39; and &#39;LSTAT&#39;. . lm2 = LinearRegression() X2 = df[[&#39;RM&#39;, &#39;LSTAT&#39;]] Y2 = df[[&#39;MEDV&#39;]] # Fit (Train) the model lm2.fit(X2,Y2) print(&quot;Intercept for the model is&quot;, lm2.intercept_, &quot;and the scope is&quot;,lm2.coef_) # Prediction Yout2 = lm2.predict(X2) # Actual and Predicted values (first five) print(&quot;Predicted Values:&quot;,Yout2[0:5]) print(&quot;Actual Values:&quot;,Y2.values[0:5]) . Intercept for the model is [-1.35827281] and the scope is [[ 5.09478798 -0.64235833]] Predicted Values: [[28.94101368] [25.48420566] [32.65907477] [32.40652 ] [31.63040699]] Actual Values: [[24. ] [21.6] [34.7] [33.4] [36.2]] . Model Visualization . We will visualize our models that we have created. For Simple Linear Regression, we can either use Regression Plot or Residual Plot. In case of regression plot, we need to focus on spread of data from regression line. If the data is too far from regression line, then we can say that Linear Model is not the best fit. . Since we have already used Regression Plot, we will use Residual Plot. A Residual is the difference between observed value (Y) and predicted value (Yout). In residual plot, X-axis will have independent variable and Y-Axis will have residuals. . What to look in residual plot? . If the points in a residual plot are randomly spread out around the x-axis, then a linear model is appropriate for the data. Randomly spread out residuals means that the variance is constant, and thus the linear model is a good fit for this data. | . # Seaborn library to be used for Residual Plot plt.figure(figsize=(6,6)) sns.residplot(df[&#39;RM&#39;],df[&#39;MEDV&#39;]) plt.show() . For Multiple Linear Regression, we can&#39;t use Regression or Residual Plot because of multiple independent variables, so we will use Distribution Plot. . plt.figure(figsize=(6,6)) ax1 = sns.distplot(df[&#39;MEDV&#39;], hist=False, color=&quot;r&quot;, label=&quot;Actual&quot;) sns.distplot(Yout2, hist=False, color=&quot;b&quot;, label=&quot;Fitted&quot;, ax=ax1) . &lt;matplotlib.axes._subplots.AxesSubplot at 0x1a1e74a748&gt; . Model Accuracy . We will use the following quantitative methods for finding model accuracy. . Mean Squared Error (MSE) . The Mean Squared Error measures the average of the squares of errors. It is calculated by :- . Finding the error between actual and predicted value | Taking a square of it | Sum up all the values | Divide by number of values | . R-squared . R squared, also known as the coefficient of determination is a measure to indicate how close the data is to the fitted regression line. . R^2 = 1 - MSE of regression line / MSE of average of data . Which one is better model? . Model will less MSE and high R-Square value | . We can use the sklearn.metrics.mean_squared_error to find the Mean Squared Error and model score() method to obtain R-Square value. . from sklearn.metrics import mean_squared_error # Simple Linear Regression mse1 = mean_squared_error(Y1,Yout1) print(&quot;Mean square error for simple linear regression is&quot;,mse1) print(&quot;R-Square value for simple linear regression is&quot;, lm1.score(X1,Y1)) print(&quot; n&quot;) # Multiple Linear Regression mse2 = mean_squared_error(Y2,Yout2) print(&quot;Mean square error for mulitple linear regression is&quot;,mse2) print(&quot;R-Square value for multiple linear regression is&quot;, lm2.score(X2,Y2)) . Mean square error for simple linear regression is 43.60055177116956 R-Square value for simple linear regression is 0.4835254559913343 Mean square error for mulitple linear regression is 30.51246877729947 R-Square value for multiple linear regression is 0.6385616062603403 . We can see that the multiple linear regression model seems to perform better because of high R-Square value and low mean square error. . Model Evaluation : Train and Test Data, Cross Validation . As I mentioned before, in real-world we will split our data into test and training data to evaluate our model. We will use &quot;train_test_split&quot; method to split our data into testing and training data. In this section, I will be using Multiple Regression Model to illustrate this process. . # First step that we will take is to seperate target data y_data = df[&#39;MEDV&#39;] x_data = df.drop(&#39;MEDV&#39;,axis=1) from sklearn.model_selection import train_test_split # Split the data into test and training (15% as test data) x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.15, random_state=10) print(&quot;Number of test samples :&quot;, x_test.shape[0]) print(&quot;Number of training samples:&quot;,x_train.shape[0]) lm = LinearRegression() # Fit (Train) the model using the training data lm.fit(x_train[[&#39;RM&#39;,&#39;LSTAT&#39;]],y_train) # Prediction using Training Data yout_train = lm.predict(x_train[[&#39;RM&#39;,&#39;LSTAT&#39;]]) print(yout_train[0:5]) # Prediction using Test Data yout_test = lm.predict(x_test[[&#39;RM&#39;,&#39;LSTAT&#39;]]) print(yout_test[0:5]) print(&quot; n&quot;) # Model accuracy using Test Data mse_test = mean_squared_error(y_test,yout_test) print(&quot;Mean square error is&quot;,mse_test) print(&quot;R-Square value using test data is&quot;, lm.score(x_test[[&#39;RM&#39;,&#39;LSTAT&#39;]],y_test)) print(&quot; n&quot;) # Model accuracy using Training Data mse_train = mean_squared_error(y_train,yout_train) print(&quot;Mean square error is&quot;,mse_train) print(&quot;R-Square value using training data is&quot;, lm.score(x_train[[&#39;RM&#39;,&#39;LSTAT&#39;]],y_train)) . Number of test samples : 76 Number of training samples: 430 [38.74400503 5.69000561 19.41554723 30.26876646 21.13562849] [26.21310048 29.61955969 27.50797208 29.69508151 17.77881853] Mean square error is 47.91753944668556 R-Square value using test data is 0.5784951912105682 Mean square error is 27.636206385020866 R-Square value using training data is 0.6375993387266081 . Cross Validation : . Division of data into testing and training data may result into a problem especially if the data is sorted by some particular features and our testing data does not have that data. With Cross Validation, we will use entire subset of data for training and testing in iterations. This is just a brief introduction on this topic and there are other methods to perform cross validation. . In the example below, we are using K-Fold validation technique and dividing our data into 5 folds and each of the fold will be used as a test data. We will then take the mean of all the iterations. . from sklearn.model_selection import cross_val_score, KFold rcross = cross_val_score(lm, x_data, y_data, cv=KFold(n_splits=5,shuffle=True)) print(rcross) print(&quot;The mean of the folds are&quot;, rcross.mean()) . [0.62229666 0.7348349 0.74170714 0.65677571 0.77563056] The mean of the folds are 0.7062489913934608 .",
            "url": "https://mlblog.singhsarbjit.com/machine_learning/2020/05/12/Linear_Regression.html",
            "relUrl": "/machine_learning/2020/05/12/Linear_Regression.html",
            "date": " • May 12, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "",
          "url": "https://mlblog.singhsarbjit.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mlblog.singhsarbjit.com/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}